        -:    0:Source:/home/borzor/CLionProjects/docxtotxt/mainDoc/source/DocumentLoader.cpp
        -:    0:Graph:/home/borzor/CLionProjects/docxtotxt/cmake-build-debug-coverage/CMakeFiles/docxtotxt.dir/mainDoc/source/DocumentLoader.cpp.gcno
        -:    0:Data:/home/borzor/CLionProjects/docxtotxt/cmake-build-debug-coverage/CMakeFiles/docxtotxt.dir/mainDoc/source/DocumentLoader.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by borzor on 11/30/22.
        -:    3://
        -:    4:
        -:    5:#include <numeric>
        -:    6:#include "../headers/DocumentLoader.h"
        -:    7:#include "../ParserCommons/CommonFunctions.h"
        -:    8:
        -:    9:namespace docxtotxt {
function _ZN9docxtotxt14DocumentLoaderC2ERNS_9options_tERNS_12BufferWriterE called 7 returned 100% blocks executed 53%
        7:   10:    DocumentLoader::DocumentLoader(options_t &options, BufferWriter &writer) : options(options), writer(writer) {
        7:   10-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:   10-block  1
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
    $$$$$:   10-block  2
call   10 never executed
    $$$$$:   10-block  3
call   11 never executed
    $$$$$:   10-block  4
call   12 never executed
    $$$$$:   10-block  5
call   13 never executed
    $$$$$:   10-block  6
call   14 never executed
    $$$$$:   10-block  7
call   15 never executed
        7:   11:        this->docInfo = {};
        7:   11-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
call    5 returned 7
call    6 returned 7
call    7 returned 7
call    8 returned 7
call    9 returned 7
call   10 returned 7
call   11 returned 7
        7:   12:        this->pptInfo = {};
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
        7:   13:        this->xlsInfo = {};
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        -:   14:        int err;
        7:   15:        options.input = zip_open(options.filePath, 0, &err);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
       7*:   16:        if (options.input == nullptr)throw runtime_error("Error: Cannot unzip file, error number: " + to_string(err));
        7:   16-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    %%%%%:   16-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   16-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   16-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   16-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:   16-block  5
call   15 never executed
    $$$$$:   16-block  6
    $$$$$:   16-block  7
call   16 never executed
    $$$$$:   16-block  8
    $$$$$:   16-block  9
call   17 never executed
        7:   17:    }
        7:   17-block  0
        -:   18:
function _ZN9docxtotxt14DocumentLoader8loadDataEv called 7 returned 100% blocks executed 60%
        7:   19:    void DocumentLoader::loadData() {
        7:   20:        openFileAndParse(CONTENT_TYPE_NAME, &DocumentLoader::parseContentTypes);
        7:   20-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   20-block  1
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:   20-block  2
call    7 returned 7
call    8 returned 7
    $$$$$:   20-block  3
call    9 never executed
    $$$$$:   20-block  4
    $$$$$:   20-block  5
call   10 never executed
    $$$$$:   20-block  6
call   11 never executed
        7:   21:        switch (options.docType) {
branch  0 taken 2
branch  1 taken 3
branch  2 taken 2
branch  3 taken 0
        2:   22:            case pptx: {
        2:   23:                loadPptxData();
        2:   23-block  0
call    0 returned 2
        2:   24:                break;
        -:   25:            }
        3:   26:            case docx: {
        3:   27:                loadDocxData();
        3:   27-block  0
call    0 returned 3
        3:   28:                break;
        -:   29:            }
        2:   30:            case xlsx: {
        2:   31:                loadXlsxData();
        2:   31-block  0
call    0 returned 2
        2:   32:                break;
        -:   33:            }
        -:   34:        }
        7:   35:        if (((options.flags >> 4) & 1)) {
        7:   35-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   36:            openFileAndParse("docProps/app.xml", &DocumentLoader::parseAppFile);
        7:   36-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   36-block  1
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:   36-block  2
call    7 returned 7
call    8 returned 7
    $$$$$:   36-block  3
call    9 never executed
    $$$$$:   36-block  4
    $$$$$:   36-block  5
call   10 never executed
    $$$$$:   36-block  6
call   11 never executed
        7:   37:            openFileAndParse("docProps/core.xml", &DocumentLoader::parseCoreFile);
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   37-block  0
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:   37-block  1
call    7 returned 7
call    8 returned 7
    $$$$$:   37-block  2
call    9 never executed
    $$$$$:   37-block  3
    $$$$$:   37-block  4
call   10 never executed
        -:   38:        }
        7:   39:    }
        7:   39-block  0
        -:   40:
function _ZN9docxtotxt14DocumentLoader16openFileAndParseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEMS0_FvPN8tinyxml211XMLDocumentEE called 65 returned 100% blocks executed 26%
       65:   41:    void DocumentLoader::openFileAndParse(const string &fileName, void (DocumentLoader::*f)(XMLDocument *)) {
       65:   42:        struct zip_stat file_info{};
      130:   43:        XMLDocument document;
       65:   43-block  0
call    0 returned 65
branch  1 taken 65 (fallthrough)
branch  2 taken 0 (throw)
       65:   43-block  1
call    3 returned 65
    $$$$$:   43-block  2
call    4 never executed
       65:   44:        if (zip_stat(options.input, fileName.c_str(), 0, &file_info) == -1)
       65:   44-block  0
call    0 returned 65
call    1 returned 65
branch  2 taken 65 (fallthrough)
branch  3 taken 0 (throw)
       65:   44-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 65
    #####:   45:            throw runtime_error("Error: Cannot get info about " + fileName + " file");
    %%%%%:   45-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   45-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   45-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   45-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   45-block  4
call   13 never executed
    $$$$$:   45-block  5
    $$$$$:   45-block  6
call   14 never executed
    $$$$$:   45-block  7
    $$$$$:   45-block  8
call   15 never executed
        -:   46://        char buffer[file_info.size];
        -:   47:        char *buff;
       65:   48:        buff = (char *) malloc(file_info.size);
        -:   49:
        -:   50:
       65:   51:        auto zip_file = zip_fopen(options.input, fileName.c_str(), 0);
       65:   51-block  0
call    0 returned 65
call    1 returned 65
branch  2 taken 65 (fallthrough)
branch  3 taken 0 (throw)
       65:   52:        if (zip_fread(zip_file, buff, file_info.size) == -1)
       65:   52-block  0
call    0 returned 65
branch  1 taken 65 (fallthrough)
branch  2 taken 0 (throw)
       65:   52-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 65
    #####:   53:            throw runtime_error("Error: Cannot read " + fileName + " file");
    %%%%%:   53-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   53-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   53-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   53-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   53-block  4
call   13 never executed
    $$$$$:   53-block  5
    $$$$$:   53-block  6
call   14 never executed
    $$$$$:   53-block  7
    $$$$$:   53-block  8
call   15 never executed
       65:   54:        zip_fclose(zip_file);
       65:   54-block  0
call    0 returned 65
branch  1 taken 65 (fallthrough)
branch  2 taken 0 (throw)
       65:   55:        if (document.Parse(buff, file_info.size) != tinyxml2::XML_SUCCESS)
       65:   55-block  0
call    0 returned 65
branch  1 taken 65 (fallthrough)
branch  2 taken 0 (throw)
       65:   55-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 65
    #####:   56:            throw runtime_error("Error: Cannot parse " + fileName + " file");
    %%%%%:   56-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   56-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   56-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   56-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   56-block  4
call   13 never executed
    $$$$$:   56-block  5
    $$$$$:   56-block  6
call   14 never executed
    $$$$$:   56-block  7
    $$$$$:   56-block  8
call   15 never executed
      65*:   57:        (this->*f)(&document);
       65:   57-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 65
    %%%%%:   57-block  1
       65:   57-block  2
       65:   57-block  3
call    2 returned 65
branch  3 taken 65 (fallthrough)
branch  4 taken 0 (throw)
       65:   58:    }
        -:   59:
function _ZN9docxtotxt14DocumentLoader16openFileAndParseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_11relations_tEMS0_FvPN8tinyxml211XMLDocumentESA_E called 26 returned 100% blocks executed 36%
       26:   60:    void DocumentLoader::openFileAndParse(const string &fileName, relations_t &relations,
        -:   61:                                          void (DocumentLoader::*f)(XMLDocument *, relations_t &)) {
       26:   62:        struct zip_stat file_info{};
    #####:   63:        XMLDocument document;
    $$$$$:   63-block  0
call    0 never executed
       26:   64:        if (zip_stat(options.input, fileName.c_str(), 0, &file_info) == -1)
       26:   64-block  0
call    0 returned 26
call    1 returned 26
branch  2 taken 26 (fallthrough)
branch  3 taken 0 (throw)
       26:   64-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 26
    #####:   65:            return; //its normal situation then no relations file
    %%%%%:   65-block  0
       26:   66:        char buffer4[file_info.size];
       26:   67:        auto zip_file = zip_fopen(options.input, fileName.c_str(), 0);
       26:   67-block  0
call    0 returned 26
call    1 returned 26
branch  2 taken 26 (fallthrough)
branch  3 taken 0 (throw)
       26:   68:        if (zip_fread(zip_file, &buffer4, file_info.size) == -1)
       26:   68-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   68-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 26
    #####:   69:            throw runtime_error("Error: Cannot read " + fileName + " file");
    %%%%%:   69-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   69-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   69-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   69-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   69-block  4
call   13 never executed
    $$$$$:   69-block  5
    $$$$$:   69-block  6
call   14 never executed
    $$$$$:   69-block  7
    $$$$$:   69-block  8
call   15 never executed
       26:   70:        zip_fclose(zip_file);
       26:   70-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   71:        if (document.Parse(buffer4, file_info.size) != tinyxml2::XML_SUCCESS)
       26:   71-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   71-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 26
    #####:   72:            throw runtime_error("Error: Cannot parse " + fileName + " file");
    %%%%%:   72-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   72-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   72-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   72-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:   72-block  4
call   13 never executed
    $$$$$:   72-block  5
    $$$$$:   72-block  6
call   14 never executed
    $$$$$:   72-block  7
    $$$$$:   72-block  8
call   15 never executed
      52*:   73:        (this->*f)(&document, relations);
       26:   73-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:   73-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 26
    %%%%%:   73-block  2
       26:   73-block  3
       26:   73-block  4
call    5 returned 26
branch  6 taken 26 (fallthrough)
branch  7 taken 0 (throw)
        -:   74:    }
        -:   75:
function _ZN9docxtotxt14DocumentLoader12parseAppFileEPN8tinyxml211XMLDocumentE called 7 returned 100% blocks executed 75%
        7:   76:    void DocumentLoader::parseAppFile(XMLDocument *doc) {
        7:   77:        auto *current_element = doc->RootElement()->FirstChildElement();
        7:   77-block  0
call    0 returned 7
call    1 returned 7
        7:   78:        writer.getMetadata()->application = L" ";
call    0 returned 7
call    1 returned 7
        7:   79:        switch (options.docType) {
branch  0 taken 2
branch  1 taken 3
branch  2 taken 2
branch  3 taken 0
       35:   80:            case pptx: {
       35:   81:                while (current_element != nullptr) {
       35:   81-block  0
branch  0 taken 33 (fallthrough)
branch  1 taken 2
       33:   82:                    if (!strcmp(current_element->Value(), "slides")) {
       33:   82-block  0
call    0 returned 33
branch  1 taken 33 (fallthrough)
branch  2 taken 0
        -:   83://                        writer.getMetadata()->slides = atoi(current_element->GetText());
       33:   84:                    } else if (!strcmp(current_element->Value(), "Words")) {
       33:   84-block  0
call    0 returned 33
branch  1 taken 2 (fallthrough)
branch  2 taken 31
        2:   85:                        writer.getMetadata()->words = strtol(current_element->GetText(), nullptr, 10);
        2:   85-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
       31:   86:                    } else if (!strcmp(current_element->Value(), "Application")) {
       31:   86-block  0
call    0 returned 31
branch  1 taken 2 (fallthrough)
branch  2 taken 29
        2:   87:                        auto text = current_element->GetText();
        2:   87-block  0
call    0 returned 2
        2:   88:                        if (text == nullptr) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:   89:                            //                            writer.getMetadata()->application = L" ";
        -:   90:                        } else
        2:   91:                            writer.getMetadata()->application = writer.convertString(text);
        2:   91-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   91-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   91-block  2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   91-block  3
call   10 returned 2
call   11 returned 2
call   12 returned 2
call   13 returned 2
    $$$$$:   91-block  4
call   14 never executed
    $$$$$:   91-block  5
    $$$$$:   91-block  6
call   15 never executed
    $$$$$:   91-block  7
    $$$$$:   91-block  8
call   16 never executed
    $$$$$:   91-block  9
call   17 never executed
        -:   92:                    }
       33:   93:                    current_element = current_element->NextSiblingElement();
       33:   93-block  0
call    0 returned 33
        -:   94:                }
        2:   95:                break;
        2:   95-block  0
        -:   96:            }
       57:   97:            case docx: {
       57:   98:                while (current_element != nullptr) {
       57:   98-block  0
branch  0 taken 54 (fallthrough)
branch  1 taken 3
       54:   99:                    if (!strcmp(current_element->Value(), "Pages")) {
       54:   99-block  0
call    0 returned 54
branch  1 taken 3 (fallthrough)
branch  2 taken 51
        3:  100:                        writer.getMetadata()->pages = strtol(current_element->GetText(), nullptr, 10);
        3:  100-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
       51:  101:                    } else if (!strcmp(current_element->Value(), "Words")) {
       51:  101-block  0
call    0 returned 51
branch  1 taken 3 (fallthrough)
branch  2 taken 48
        3:  102:                        writer.getMetadata()->words = strtol(current_element->GetText(), nullptr, 10);
        3:  102-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
       48:  103:                    } else if (!strcmp(current_element->Value(), "Application")) {
       48:  103-block  0
call    0 returned 48
branch  1 taken 3 (fallthrough)
branch  2 taken 45
        3:  104:                        auto text = current_element->GetText();
        3:  104-block  0
call    0 returned 3
        3:  105:                        if (text != nullptr)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  106:                            writer.getMetadata()->application = writer.convertString(text);
        3:  106-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  106-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  106-block  2
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3:  106-block  3
call   10 returned 3
call   11 returned 3
call   12 returned 3
call   13 returned 3
    $$$$$:  106-block  4
call   14 never executed
    $$$$$:  106-block  5
    $$$$$:  106-block  6
call   15 never executed
    $$$$$:  106-block  7
    $$$$$:  106-block  8
call   16 never executed
    $$$$$:  106-block  9
call   17 never executed
        -:  107:                    }
       54:  108:                    current_element = current_element->NextSiblingElement();
       54:  108-block  0
call    0 returned 54
        -:  109:                }
        3:  110:                break;
        3:  110-block  0
        -:  111:            }
       20:  112:            case xlsx: {
       20:  113:                while (current_element != nullptr) {
       20:  113-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 2
       18:  114:                    if (!strcmp(current_element->Value(), "Application")) {
       18:  114-block  0
call    0 returned 18
branch  1 taken 2 (fallthrough)
branch  2 taken 16
        2:  115:                        auto text = current_element->GetText();
        2:  115-block  0
call    0 returned 2
        2:  116:                        if (text != nullptr)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  117:                            writer.getMetadata()->application = writer.convertString(text);
        2:  117-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  117-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  117-block  2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:  117-block  3
call   10 returned 2
call   11 returned 2
call   12 returned 2
call   13 returned 2
    $$$$$:  117-block  4
call   14 never executed
    $$$$$:  117-block  5
    $$$$$:  117-block  6
call   15 never executed
    $$$$$:  117-block  7
    $$$$$:  117-block  8
call   16 never executed
        -:  118:                    }
       18:  119:                    current_element = current_element->NextSiblingElement();
       18:  119-block  0
call    0 returned 18
        -:  120:                }
        2:  121:                break;
        2:  121-block  0
        -:  122:            }
        -:  123:        }
        7:  124:    }
        7:  124-block  0
        -:  125:
function _ZN9docxtotxt14DocumentLoader13parseCoreFileEPN8tinyxml211XMLDocumentE called 7 returned 100% blocks executed 81%
        7:  126:    void DocumentLoader::parseCoreFile(XMLDocument *doc) {
       14:  127:        wstringConvert convert;
        7:  127-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  127-block  1
call    3 returned 7
    $$$$$:  127-block  2
call    4 never executed
        7:  128:        writer.getMetadata()->creator = L" ";
        7:  128-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  128-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  129:        writer.getMetadata()->lastModifiedBy = L" ";
        7:  129-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  129-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  130:        writer.getMetadata()->created = L" ";
        7:  130-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  130-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  131:        writer.getMetadata()->modified = L" ";
        7:  131-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  131-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  132:        auto *current_element = doc->RootElement()->FirstChildElement();
        7:  132-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  132-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  132-block  2
       53:  133:        while (current_element != nullptr) {
       53:  133-block  0
branch  0 taken 46 (fallthrough)
branch  1 taken 7
       46:  134:            if (!strcmp(current_element->Value(), "dc:creator")) {
       46:  134-block  0
call    0 returned 46
branch  1 taken 46 (fallthrough)
branch  2 taken 0 (throw)
       46:  134-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 39
        7:  135:                auto text = current_element->GetText();
        7:  135-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  136:                if (text != nullptr)
        7:  136-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  137:                    writer.getMetadata()->creator = convert.from_bytes(text);
        7:  137-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  137-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  137-block  2
call    6 returned 7
call    7 returned 7
    $$$$$:  137-block  3
call    8 never executed
    $$$$$:  137-block  4
       39:  138:            } else if (!strcmp(current_element->Value(), "cp:lastModifiedBy")) {
       39:  138-block  0
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0 (throw)
       39:  138-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 32
        7:  139:                auto text = current_element->GetText();
        7:  139-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  140:                if (text != nullptr)
        7:  140-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  141:                    writer.getMetadata()->lastModifiedBy = convert.from_bytes(text);
        7:  141-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  141-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  141-block  2
call    6 returned 7
call    7 returned 7
    $$$$$:  141-block  3
call    8 never executed
    $$$$$:  141-block  4
       32:  142:            } else if (!strcmp(current_element->Value(), "cp:revision")) {
       32:  142-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:  142-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 27
        5:  143:                writer.getMetadata()->revision = strtol(current_element->GetText(), nullptr, 10);
        5:  143-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  143-block  1
call    3 returned 5
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  143-block  2
       27:  144:            } else if (!strcmp(current_element->Value(), "dcterms:created")) {
       27:  144-block  0
call    0 returned 27
branch  1 taken 27 (fallthrough)
branch  2 taken 0 (throw)
       27:  144-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 20
        7:  145:                auto text = current_element->GetText();
        7:  145-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  146:                if (text != nullptr)
        7:  146-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  147:                    writer.getMetadata()->created = convert.from_bytes(text);
        7:  147-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  147-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  147-block  2
call    6 returned 7
call    7 returned 7
    $$$$$:  147-block  3
call    8 never executed
    $$$$$:  147-block  4
       20:  148:            } else if (!strcmp(current_element->Value(), "dcterms:modified")) {
       20:  148-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  148-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 13
        7:  149:                auto text = current_element->GetText();
        7:  149-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  150:                if (text != nullptr)
        7:  150-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  151:                    writer.getMetadata()->modified = convert.from_bytes(text);
        7:  151-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  151-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  151-block  2
call    6 returned 7
call    7 returned 7
    $$$$$:  151-block  3
call    8 never executed
    $$$$$:  151-block  4
        -:  152:            }
       46:  153:            current_element = current_element->NextSiblingElement();
       46:  153-block  0
call    0 returned 46
branch  1 taken 46 (fallthrough)
branch  2 taken 0 (throw)
       46:  153-block  1
        -:  154:        }
        7:  155:    }
        -:  156:
function _ZN9docxtotxt14DocumentLoader17parseContentTypesEPN8tinyxml211XMLDocumentE called 7 returned 100% blocks executed 78%
        7:  157:    void DocumentLoader::parseContentTypes(XMLDocument *xmlDocument) {
       14:  158:        XMLPrinter printer;
        7:  158-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 7
    $$$$$:  158-block  1
call    4 never executed
       14:  159:        string tmp, tmp2;
        7:  159-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
    $$$$$:  159-block  1
call    3 never executed
    $$$$$:  159-block  2
call    4 never executed
        7:  160:        auto *current_element = xmlDocument->RootElement()->FirstChildElement();
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  160-block  0
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  160-block  1
      153:  161:        while (current_element != nullptr) {
      153:  161-block  0
branch  0 taken 146 (fallthrough)
branch  1 taken 7
      146:  162:            current_element->Accept(&printer);
      146:  162-block  0
call    0 returned 146
branch  1 taken 146 (fallthrough)
branch  2 taken 0 (throw)
      146:  163:            tmp = printer.CStr();
      146:  163-block  0
call    0 returned 146
branch  1 taken 146 (fallthrough)
branch  2 taken 0 (throw)
      146:  163-block  1
call    3 returned 146
branch  4 taken 146 (fallthrough)
branch  5 taken 0 (throw)
      146:  164:            auto pos1 = tmp.find('\"');
      146:  164-block  0
call    0 returned 146
      146:  165:            auto pos2 = tmp.find('\"', pos1 + 1);
call    0 returned 146
      146:  166:            auto pos3 = tmp.find('\"', pos2 + 1);
call    0 returned 146
      146:  167:            auto pos4 = tmp.find('\"', pos3 + 1);
call    0 returned 146
      146:  168:            tmp2 = tmp.substr(pos1 + 1, pos2 - pos1 - 1);
call    0 returned 146
branch  1 taken 146 (fallthrough)
branch  2 taken 0 (throw)
      146:  168-block  0
call    3 returned 146
call    4 returned 146
      146:  169:            if (tmp2.rfind('/', 0) == 0)
call    0 returned 146
branch  1 taken 120 (fallthrough)
branch  2 taken 26
      120:  170:                tmp2.erase(0, 1);
      120:  170-block  0
call    0 returned 120
branch  1 taken 120 (fallthrough)
branch  2 taken 0 (throw)
      146:  171:            this->content_types.emplace(tmp2, tmp.substr(pos3 + 1, pos4 - pos3 - 1));
      146:  171-block  0
call    0 returned 146
branch  1 taken 146 (fallthrough)
branch  2 taken 0 (throw)
      146:  171-block  1
call    3 returned 146
branch  4 taken 146 (fallthrough)
branch  5 taken 0 (throw)
      146:  171-block  2
call    6 returned 146
    $$$$$:  171-block  3
call    7 never executed
    $$$$$:  171-block  4
      146:  172:            printer.ClearBuffer();
call    0 returned 146
branch  1 taken 146 (fallthrough)
branch  2 taken 0 (throw)
      146:  173:            current_element = current_element->NextSiblingElement();
      146:  173-block  0
call    0 returned 146
branch  1 taken 146 (fallthrough)
branch  2 taken 0 (throw)
      146:  173-block  1
        -:  174:        }
        7:  175:        free(current_element);
        7:  175-block  0
call    0 returned 7
        7:  176:    }
        -:  177:
function _ZN9docxtotxt14DocumentLoader17parseRelationShipEPN8tinyxml211XMLDocumentERNS_11relations_tE called 26 returned 100% blocks executed 52%
       26:  178:    void DocumentLoader::parseRelationShip(XMLDocument *doc, relations_t &relations) {
       26:  179:        auto *mainElement = doc->RootElement()->FirstChildElement();
       26:  179-block  0
call    0 returned 26
call    1 returned 26
      127:  180:        while (mainElement != nullptr) {
      127:  180-block  0
branch  0 taken 101 (fallthrough)
branch  1 taken 26
      101:  181:            if (!strcmp(mainElement->Value(), "Relationship")) {
      101:  181-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0
      101:  182:                auto type = mainElement->Attribute("Type");
      101:  182-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      202:  183:                string id = mainElement->Attribute("Id");
      101:  183-block  0
call    0 returned 101
call    1 returned 101
branch  2 taken 101 (fallthrough)
branch  3 taken 0 (throw)
      101:  183-block  1
call    4 returned 101
branch  5 taken 101 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 101
    $$$$$:  183-block  2
    $$$$$:  183-block  3
call    8 never executed
      202:  184:                string target = mainElement->Attribute("Target");
call    0 returned 101
call    1 returned 101
branch  2 taken 101 (fallthrough)
branch  3 taken 0 (throw)
      101:  184-block  0
call    4 returned 101
branch  5 taken 101 (fallthrough)
branch  6 taken 0 (throw)
      101:  184-block  1
call    7 returned 101
    $$$$$:  184-block  2
    $$$$$:  184-block  3
call    8 never executed
      101:  185:                if (ends_with(type, "image")) {
call    0 returned 101
call    1 returned 101
branch  2 taken 101 (fallthrough)
branch  3 taken 0 (throw)
      101:  185-block  0
call    4 returned 101
call    5 returned 101
branch  6 taken 101 (fallthrough)
branch  7 taken 0 (throw)
      101:  185-block  1
call    8 returned 101
branch  9 taken 101 (fallthrough)
branch 10 taken 0 (throw)
      101:  185-block  2
call   11 returned 101
call   12 returned 101
call   13 returned 101
call   14 returned 101
branch 15 taken 42 (fallthrough)
branch 16 taken 59
    $$$$$:  185-block  3
call   17 never executed
    $$$$$:  185-block  4
    $$$$$:  185-block  5
call   18 never executed
    $$$$$:  185-block  6
    $$$$$:  185-block  7
call   19 never executed
    $$$$$:  185-block  8
    $$$$$:  185-block  9
call   20 never executed
    $$$$$:  185-block 10
       42:  186:                    relations.imageRelationship.emplace(id, target.substr(target.find_last_of('/') + 1));
       42:  186-block  0
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
       42:  186-block  1
call    4 returned 42
branch  5 taken 42 (fallthrough)
branch  6 taken 0 (throw)
       42:  186-block  2
call    7 returned 42
    $$$$$:  186-block  3
call    8 never executed
    $$$$$:  186-block  4
       59:  187:                } else if (ends_with(type, "hyperlink")) {
       59:  187-block  0
call    0 returned 59
call    1 returned 59
branch  2 taken 59 (fallthrough)
branch  3 taken 0 (throw)
       59:  187-block  1
call    4 returned 59
call    5 returned 59
branch  6 taken 59 (fallthrough)
branch  7 taken 0 (throw)
       59:  187-block  2
call    8 returned 59
branch  9 taken 59 (fallthrough)
branch 10 taken 0 (throw)
       59:  187-block  3
call   11 returned 59
call   12 returned 59
call   13 returned 59
call   14 returned 59
branch 15 taken 1 (fallthrough)
branch 16 taken 58
    $$$$$:  187-block  4
call   17 never executed
    $$$$$:  187-block  5
    $$$$$:  187-block  6
call   18 never executed
    $$$$$:  187-block  7
    $$$$$:  187-block  8
call   19 never executed
    $$$$$:  187-block  9
    $$$$$:  187-block 10
call   20 never executed
    $$$$$:  187-block 11
        1:  188:                    relations.hyperlinkRelationship.emplace(id, target);
        1:  188-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      168:  189:                } else if (ends_with(type, "notesSlide") || (ends_with(type, "footnotes")) ||
       58:  189-block  0
call    0 returned 58
call    1 returned 58
branch  2 taken 58 (fallthrough)
branch  3 taken 0 (throw)
       58:  189-block  1
call    4 returned 58
call    5 returned 58
branch  6 taken 58 (fallthrough)
branch  7 taken 0 (throw)
       58:  189-block  2
call    8 returned 58
branch  9 taken 58 (fallthrough)
branch 10 taken 0 (throw)
       58:  189-block  3
branch 11 taken 55 (fallthrough)
branch 12 taken 3
       55:  189-block  4
call   13 returned 55
call   14 returned 55
branch 15 taken 55 (fallthrough)
branch 16 taken 0 (throw)
       55:  189-block  5
call   17 returned 55
call   18 returned 55
branch 19 taken 55 (fallthrough)
branch 20 taken 0 (throw)
       55:  189-block  6
call   21 returned 55
branch 22 taken 55 (fallthrough)
branch 23 taken 0 (throw)
       55:  189-block  7
branch 24 taken 52 (fallthrough)
branch 25 taken 3
        9:  189-block  8
       49:  189-block  9
       55:  189-block 10
call   26 returned 55
       58:  189-block 11
branch 27 taken 55 (fallthrough)
branch 28 taken 3
       55:  189-block 12
call   29 returned 55
       58:  189-block 13
branch 30 taken 55 (fallthrough)
branch 31 taken 3
       55:  189-block 14
call   32 returned 55
       58:  189-block 15
branch 33 taken 55 (fallthrough)
branch 34 taken 3
       55:  189-block 16
call   35 returned 55
       58:  189-block 17
branch 36 taken 58 (fallthrough)
branch 37 taken 0
       58:  189-block 18
call   38 returned 58
       58:  189-block 19
branch 39 taken 58 (fallthrough)
branch 40 taken 0
       58:  189-block 20
call   41 returned 58
       58:  189-block 21
branch 42 taken 58 (fallthrough)
branch 43 taken 0
       58:  189-block 22
call   44 returned 58
       58:  189-block 23
branch 45 taken 58 (fallthrough)
branch 46 taken 0
       58:  189-block 24
call   47 returned 58
       58:  189-block 25
branch 48 taken 9 (fallthrough)
branch 49 taken 49
    $$$$$:  189-block 26
branch 50 never executed
branch 51 never executed
    $$$$$:  189-block 27
call   52 never executed
    $$$$$:  189-block 28
    $$$$$:  189-block 29
branch 53 never executed
branch 54 never executed
    $$$$$:  189-block 30
call   55 never executed
    $$$$$:  189-block 31
    $$$$$:  189-block 32
branch 56 never executed
branch 57 never executed
    $$$$$:  189-block 33
call   58 never executed
    $$$$$:  189-block 34
    $$$$$:  189-block 35
branch 59 never executed
branch 60 never executed
    $$$$$:  189-block 36
call   61 never executed
    $$$$$:  189-block 37
    $$$$$:  189-block 38
branch 62 never executed
branch 63 never executed
    $$$$$:  189-block 39
call   64 never executed
    $$$$$:  189-block 40
    $$$$$:  189-block 41
branch 65 never executed
branch 66 never executed
    $$$$$:  189-block 42
call   67 never executed
    $$$$$:  189-block 43
    $$$$$:  189-block 44
branch 68 never executed
branch 69 never executed
    $$$$$:  189-block 45
call   70 never executed
    $$$$$:  189-block 46
    $$$$$:  189-block 47
branch 71 never executed
branch 72 never executed
    $$$$$:  189-block 48
call   73 never executed
    $$$$$:  189-block 49
      110:  190:                           (ends_with(type, "endnotes"))) {
       52:  190-block  0
call    0 returned 52
call    1 returned 52
branch  2 taken 52 (fallthrough)
branch  3 taken 0 (throw)
       52:  190-block  1
call    4 returned 52
call    5 returned 52
branch  6 taken 52 (fallthrough)
branch  7 taken 0 (throw)
       52:  190-block  2
call    8 returned 52
branch  9 taken 52 (fallthrough)
branch 10 taken 0 (throw)
       52:  190-block  3
branch 11 taken 3 (fallthrough)
branch 12 taken 49
       58:  190-block  4
branch 13 taken 52 (fallthrough)
branch 14 taken 6
       52:  190-block  5
call   15 returned 52
       58:  190-block  6
branch 16 taken 52 (fallthrough)
branch 17 taken 6
       52:  190-block  7
call   18 returned 52
       58:  190-block  8
branch 19 taken 52 (fallthrough)
branch 20 taken 6
       52:  190-block  9
call   21 returned 52
       58:  190-block 10
branch 22 taken 52 (fallthrough)
branch 23 taken 6
       52:  190-block 11
call   24 returned 52
       58:  190-block 12
branch 25 taken 55 (fallthrough)
branch 26 taken 3
    $$$$$:  190-block 13
branch 27 never executed
branch 28 never executed
    $$$$$:  190-block 14
call   29 never executed
    $$$$$:  190-block 15
    $$$$$:  190-block 16
branch 30 never executed
branch 31 never executed
    $$$$$:  190-block 17
call   32 never executed
    $$$$$:  190-block 18
    $$$$$:  190-block 19
branch 33 never executed
branch 34 never executed
    $$$$$:  190-block 20
call   35 never executed
    $$$$$:  190-block 21
    $$$$$:  190-block 22
branch 36 never executed
branch 37 never executed
    $$$$$:  190-block 23
call   38 never executed
    $$$$$:  190-block 24
        9:  191:                    relations.notes.emplace(id, target.substr(target.find_last_of('/') + 1));
        9:  191-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        9:  191-block  1
call    4 returned 9
branch  5 taken 9 (fallthrough)
branch  6 taken 0 (throw)
        9:  191-block  2
call    7 returned 9
    $$$$$:  191-block  3
call    8 never executed
    $$$$$:  191-block  4
       49:  192:                } else if (ends_with(type, "drawing")) {
       49:  192-block  0
call    0 returned 49
call    1 returned 49
branch  2 taken 49 (fallthrough)
branch  3 taken 0 (throw)
       49:  192-block  1
call    4 returned 49
call    5 returned 49
branch  6 taken 49 (fallthrough)
branch  7 taken 0 (throw)
       49:  192-block  2
call    8 returned 49
branch  9 taken 49 (fallthrough)
branch 10 taken 0 (throw)
       49:  192-block  3
call   11 returned 49
call   12 returned 49
call   13 returned 49
call   14 returned 49
branch 15 taken 2 (fallthrough)
branch 16 taken 47
    $$$$$:  192-block  4
call   17 never executed
    $$$$$:  192-block  5
    $$$$$:  192-block  6
call   18 never executed
    $$$$$:  192-block  7
    $$$$$:  192-block  8
call   19 never executed
    $$$$$:  192-block  9
    $$$$$:  192-block 10
call   20 never executed
    $$$$$:  192-block 11
        2:  193:                    relations.drawing.emplace(id, target.substr(target.find_last_of('/') + 1));
        2:  193-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  193-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  193-block  2
call    7 returned 2
    $$$$$:  193-block  3
call    8 never executed
    $$$$$:  193-block  4
        -:  194:                }
        -:  195:            }
      101:  196:            mainElement = mainElement->NextSiblingElement();
      101:  196-block  0
call    0 returned 101
        -:  197:        }
       26:  198:    }
       26:  198-block  0
        -:  199:
function _ZN9docxtotxt14DocumentLoader25parsePresentationSettingsEPN8tinyxml211XMLDocumentE called 2 returned 100% blocks executed 100%
        2:  200:    void DocumentLoader::parsePresentationSettings(XMLDocument *doc) {
        2:  201:        auto *element = doc->FirstChildElement()->FirstChildElement();
        2:  201-block  0
call    0 returned 2
call    1 returned 2
       15:  202:        while (element != nullptr) {
       15:  202-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 2
       13:  203:            if (!strcmp(element->Value(), "p:sldSz")) {
       13:  203-block  0
call    0 returned 13
branch  1 taken 2 (fallthrough)
branch  2 taken 11
        2:  204:                auto width = strtol(element->Attribute("cx"), nullptr, 10);
        2:  204-block  0
call    0 returned 2
call    1 returned 2
        2:  205:                auto height = strtol(element->Attribute("cy"), nullptr, 10);
call    0 returned 2
call    1 returned 2
        2:  206:                pptInfo.settings.slideWidth = width;
        2:  207:                pptInfo.settings.slideHeight = height;
        2:  208:                pptInfo.settings.widthCoefficient = width / PRESENTATION_WIDTH;
        2:  209:                pptInfo.settings.heightCoefficient = height / PRESENTATION_HEIGHT;
        -:  210:            }
       13:  211:            element = element->NextSiblingElement();
       13:  211-block  0
call    0 returned 13
        -:  212:        }
        2:  213:    }
        -:  214:
function _ZN9docxtotxt14DocumentLoader22parsePresentationSlideEPN8tinyxml211XMLDocumentE called 15 returned 100% blocks executed 71%
       15:  215:    void DocumentLoader::parsePresentationSlide(XMLDocument *doc) {
       15:  216:        auto *element = doc->RootElement()->FirstChildElement()->FirstChildElement();
       15:  216-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  216-block  1
call    3 returned 15
branch  4 taken 15 (fallthrough)
branch  5 taken 0 (throw)
       15:  216-block  2
call    6 returned 15
branch  7 taken 15 (fallthrough)
branch  8 taken 0 (throw)
       30:  217:        slideInfo slideInfo;
       15:  217-block  0
call    0 returned 15
       15:  217-block  1
call    1 returned 15
    $$$$$:  217-block  2
call    2 never executed
       59:  218:        while (element != nullptr) {
       59:  218-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 15
       44:  219:            if (!strcmp(element->Value(), "p:spTree")) {
       44:  219-block  0
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
       44:  219-block  1
branch  3 taken 15 (fallthrough)
branch  4 taken 29
       15:  220:                auto nodeElem = element->FirstChildElement();
       15:  220-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  220-block  1
      134:  221:                while (nodeElem != nullptr) {
      134:  221-block  0
branch  0 taken 119 (fallthrough)
branch  1 taken 15
      119:  222:                    if (!strcmp(nodeElem->Value(), "p:sp")) {
      119:  222-block  0
call    0 returned 119
branch  1 taken 119 (fallthrough)
branch  2 taken 0 (throw)
      119:  222-block  1
branch  3 taken 66 (fallthrough)
branch  4 taken 53
      132:  223:                        presentationText object;
       66:  223-block  0
call    0 returned 66
       66:  223-block  1
call    1 returned 66
    $$$$$:  223-block  2
call    2 never executed
       66:  224:                        parseSlideText(nodeElem, object);
call    0 returned 66
branch  1 taken 66 (fallthrough)
branch  2 taken 0 (throw)
       66:  225:                        slideInfo.objects.emplace_back(object);
       66:  225-block  0
call    0 returned 66
branch  1 taken 66 (fallthrough)
branch  2 taken 0 (throw)
       53:  226:                    } else if (!strcmp(nodeElem->Value(), "p:graphicFrame")) {
       53:  226-block  0
call    0 returned 53
branch  1 taken 53 (fallthrough)
branch  2 taken 0 (throw)
       53:  226-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 52
        2:  227:                        presentationTable object;
        1:  227-block  0
call    0 returned 1
        1:  227-block  1
call    1 returned 1
    $$$$$:  227-block  2
call    2 never executed
        1:  228:                        parseSlideTable(nodeElem, object);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  229:                        slideInfo.tables.emplace_back(object);
        1:  229-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       52:  230:                    } else if (!strcmp(nodeElem->Value(), "p:pic")) {
       52:  230-block  0
call    0 returned 52
branch  1 taken 52 (fallthrough)
branch  2 taken 0 (throw)
       52:  230-block  1
branch  3 taken 10 (fallthrough)
branch  4 taken 42
       30:  231:                        auto pic = extractPicture(nodeElem, "p");
       10:  231-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10:  231-block  1
call    4 returned 10
branch  5 taken 10 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 10
       10:  231-block  2
call    8 returned 10
    $$$$$:  231-block  3
    $$$$$:  231-block  4
    $$$$$:  231-block  5
call    9 never executed
       10:  232:                        slideInfo.pictures.emplace_back(pic);
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -:  233:                    }
      119:  234:                    nodeElem = nodeElem->NextSiblingElement();
      119:  234-block  0
call    0 returned 119
branch  1 taken 119 (fallthrough)
branch  2 taken 0 (throw)
      119:  234-block  1
        -:  235:                }
        -:  236:            }
       44:  237:            element = element->NextSiblingElement();
       44:  237-block  0
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
       44:  237-block  1
        -:  238:        }
       15:  239:        pptInfo.slides.emplace_back(slideInfo);
       15:  239-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  240:    }
        -:  241:
function _ZN9docxtotxt14DocumentLoader14parseSlideNoteEPN8tinyxml211XMLDocumentE called 3 returned 100% blocks executed 82%
        3:  242:    void DocumentLoader::parseSlideNote(XMLDocument *doc) {
        3:  243:        auto *element = doc->RootElement()->FirstChildElement()->FirstChildElement();
        3:  243-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  243-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  243-block  2
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
        6:  244:        slideInfo slideInfo;
        3:  244-block  0
call    0 returned 3
        3:  244-block  1
call    1 returned 3
    $$$$$:  244-block  2
call    2 never executed
        9:  245:        while (element != nullptr) {
        9:  245-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  246:            if (!strcmp(element->Value(), "p:spTree")) {
        6:  246-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  246-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        3:  247:                auto nodeElem = element->FirstChildElement();
        3:  247-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  247-block  1
       18:  248:                while (nodeElem != nullptr) {
       18:  248-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 3
       15:  249:                    if (!strcmp(nodeElem->Value(), "p:sp")) {
       15:  249-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  249-block  1
branch  3 taken 9 (fallthrough)
branch  4 taken 6
        9:  250:                        auto txBody = nodeElem->FirstChildElement("p:txBody");
        9:  250-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  251:                        if (txBody != nullptr) {
        9:  251-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  252:                            auto tmp = extractTextBody(txBody);
        6:  252-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  252-block  1
call    3 never executed
        6:  253:                            pptInfo.notes.back().text.insert(pptInfo.notes.back().text.end(), tmp.begin(), tmp.end());
        6:  253-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
call    3 returned 6
call    4 returned 6
call    5 returned 6
call    6 returned 6
branch  7 taken 6 (fallthrough)
branch  8 taken 0 (throw)
        6:  253-block  1
call    9 returned 6
    $$$$$:  253-block  2
    $$$$$:  253-block  3
        -:  254:                        }
        -:  255:                    }
       15:  256:                    nodeElem = nodeElem->NextSiblingElement();
       15:  256-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  256-block  1
        -:  257:                }
        -:  258:            }
        6:  259:            element = element->NextSiblingElement();
        6:  259-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  259-block  1
        -:  260:        }
        3:  261:    }
        -:  262:
function _ZN9docxtotxt14DocumentLoader15parseSlideTableEPN8tinyxml210XMLElementERNS_17presentationTableE called 1 returned 100% blocks executed 81%
        1:  263:    void DocumentLoader::parseSlideTable(XMLElement *element, presentationTable &object) {
        1:  264:        auto xfrm = element->FirstChildElement("p:xfrm");
        1:  264-block  0
call    0 returned 1
        1:  265:        auto graphic = element->FirstChildElement("a:graphic");
call    0 returned 1
        1:  266:        object.objectInfo = extractObjectInfo(xfrm);
call    0 returned 1
        1:  267:        if (graphic != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  268:            auto graphicData = graphic->FirstChildElement("a:graphicData");
        1:  268-block  0
call    0 returned 1
        1:  269:            if (graphicData != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2:  270:                string uri = graphicData->Attribute("uri");
        1:  270-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  270-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  270-block  2
call    7 returned 1
    $$$$$:  270-block  3
    $$$$$:  270-block  4
call    8 never executed
        1:  271:                if (std::equal(uri.begin(), uri.end(), PPT_TABLE_URI)) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  271-block  0
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        1:  272:                    auto tbl = graphicData->FirstChildElement("a:tbl");
        1:  272-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  273:                    if (tbl != nullptr) {
        1:  273-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  274:                        auto tblGrid = tbl->FirstChildElement("a:tblGrid");
        1:  274-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  275:                        auto tr = tbl->FirstChildElement("a:tr");
        1:  275-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  276:                        if (tblGrid != nullptr) {
        1:  276-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  277:                            auto gridCol = tblGrid->FirstChildElement("a:gridCol");
        1:  277-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  277-block  1
        4:  278:                            while (gridCol != nullptr) {
        4:  278-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  279:                                if (gridCol->Attribute("w") != nullptr) {
        3:  279-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  279-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        6:  280:                                    object.gridColSize.emplace_back(
        6:  281:                                            strtol(gridCol->Attribute("w"), nullptr, 10) /
        3:  281-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  281-block  1
call    3 returned 3
        3:  281-block  2
    $$$$$:  281-block  3
        3:  282:                                            pptInfo.settings.widthCoefficient);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  283:                                }
        3:  284:                                gridCol = gridCol->NextSiblingElement("a:gridCol");
        3:  284-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  284-block  1
        -:  285:                            }
        -:  286:                        }
        9:  287:                        while (tr != nullptr) {
        9:  287-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 1
       16:  288:                            std::vector<std::vector<textBody>> tmpLine;
        8:  288-block  0
call    0 returned 8
        8:  288-block  1
call    1 returned 8
    $$$$$:  288-block  2
call    2 never executed
        8:  289:                            auto tc = tr->FirstChildElement("a:tc");
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:  289-block  0
       32:  290:                            while (tc != nullptr) {
       32:  290-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 8
       24:  291:                                auto txBody = tc->FirstChildElement("a:txBody");
       24:  291-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24:  292:                                if (txBody != nullptr)
       24:  292-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  293:                                    tmpLine.emplace_back(extractTextBody(txBody));
       24:  293-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24:  293-block  1
call    3 returned 24
branch  4 taken 24 (fallthrough)
branch  5 taken 0 (throw)
       24:  293-block  2
call    6 returned 24
    $$$$$:  293-block  3
call    7 never executed
    $$$$$:  293-block  4
       24:  294:                                tc = tc->NextSiblingElement("a:tc");
       24:  294-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24:  294-block  1
        -:  295:                            }
        8:  296:                            tr = tr->NextSiblingElement("a:tr");
        8:  296-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:  297:                            object.table.emplace_back(tmpLine);
        8:  297-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:  298:                        }
        -:  299:                    }
        -:  300:                }
        -:  301:            }
        -:  302:        }
        1:  303:    }
        1:  303-block  0
        -:  304:
function _ZN9docxtotxt14DocumentLoader14parseSlideTextEPN8tinyxml210XMLElementERNS_16presentationTextE called 66 returned 100% blocks executed 100%
       66:  305:    void DocumentLoader::parseSlideText(XMLElement *element, presentationText &object) {
       66:  306:        auto spPr = element->FirstChildElement("p:spPr");
       66:  306-block  0
call    0 returned 66
       66:  307:        auto txBody = element->FirstChildElement("p:txBody");
call    0 returned 66
       66:  308:        if (spPr != nullptr) {
branch  0 taken 66 (fallthrough)
branch  1 taken 0
       66:  309:            auto xfrm = spPr->FirstChildElement("a:xfrm");
       66:  309-block  0
call    0 returned 66
       66:  310:            object.objectInfo = extractObjectInfo(xfrm);
call    0 returned 66
        -:  311:        }
       66:  312:        if (txBody != nullptr) {
       66:  312-block  0
branch  0 taken 66 (fallthrough)
branch  1 taken 0
       66:  313:            object.paragraph = extractTextBody(txBody);
       66:  313-block  0
call    0 returned 66
call    1 returned 66
call    2 returned 66
        -:  314:        }
       66:  315:    }
        -:  316:
function _ZN9docxtotxt14DocumentLoader15extractTextBodyEPN8tinyxml210XMLElementE called 96 returned 100% blocks executed 75%
       96:  317:    std::vector<textBody> DocumentLoader::extractTextBody(XMLElement *txBody) {
       96:  318:        auto par = txBody->FirstChildElement("a:p");
       96:  318-block  0
call    0 returned 96
       96:  319:        std::vector<textBody> paragraph;
call    0 returned 96
      209:  320:        while (par != nullptr) {
      209:  320-block  0
branch  0 taken 113 (fallthrough)
branch  1 taken 96
      113:  321:            textBody body;
      113:  321-block  0
call    0 returned 113
    $$$$$:  321-block  1
call    1 never executed
      113:  322:            body.align = l;
      113:  323:            auto ppr = par->FirstChildElement("a:pPr");
call    0 returned 113
branch  1 taken 113 (fallthrough)
branch  2 taken 0 (throw)
      113:  324:            auto ar = par->FirstChildElement("a:r");
      113:  324-block  0
call    0 returned 113
branch  1 taken 113 (fallthrough)
branch  2 taken 0 (throw)
      113:  324-block  1
      235:  325:            while (ar != nullptr) {
      235:  325-block  0
branch  0 taken 122 (fallthrough)
branch  1 taken 113
      122:  326:                auto at = ar->FirstChildElement("a:t");
      122:  326-block  0
call    0 returned 122
branch  1 taken 122 (fallthrough)
branch  2 taken 0 (throw)
      122:  327:                if (at != nullptr && at->GetText() != nullptr) {
      122:  327-block  0
branch  0 taken 122 (fallthrough)
branch  1 taken 0
      122:  327-block  1
call    2 returned 122
branch  3 taken 122 (fallthrough)
branch  4 taken 0 (throw)
      122:  327-block  2
branch  5 taken 121 (fallthrough)
branch  6 taken 1
      121:  327-block  3
        1:  327-block  4
      122:  327-block  5
branch  7 taken 121 (fallthrough)
branch  8 taken 1
      121:  328:                    body.text += writer.convertString(at->GetText());
      121:  328-block  0
call    0 returned 121
call    1 returned 121
branch  2 taken 121 (fallthrough)
branch  3 taken 0 (throw)
      121:  328-block  1
call    4 returned 121
branch  5 taken 121 (fallthrough)
branch  6 taken 0 (throw)
      121:  328-block  2
call    7 returned 121
branch  8 taken 121 (fallthrough)
branch  9 taken 0 (throw)
      121:  328-block  3
call   10 returned 121
branch 11 taken 121 (fallthrough)
branch 12 taken 0 (throw)
      121:  328-block  4
call   13 returned 121
call   14 returned 121
call   15 returned 121
    $$$$$:  328-block  5
call   16 never executed
    $$$$$:  328-block  6
    $$$$$:  328-block  7
call   17 never executed
    $$$$$:  328-block  8
    $$$$$:  328-block  9
call   18 never executed
    $$$$$:  328-block 10
        -:  329:                }
      122:  330:                ar = ar->NextSiblingElement("a:r");
      122:  330-block  0
call    0 returned 122
branch  1 taken 122 (fallthrough)
branch  2 taken 0 (throw)
      122:  330-block  1
        -:  331:            }
      113:  332:            if (ppr != nullptr) {
      113:  332-block  0
branch  0 taken 64 (fallthrough)
branch  1 taken 49
       64:  333:                auto algn = ppr->Attribute("algn");
       64:  333-block  0
call    0 returned 64
branch  1 taken 64 (fallthrough)
branch  2 taken 0 (throw)
       64:  334:                if (algn != nullptr) {
       64:  334-block  0
branch  0 taken 52 (fallthrough)
branch  1 taken 12
       52:  335:                    if (!strcmp(algn, "r"))
       52:  335-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 48
        4:  336:                        body.align = r;
        4:  336-block  0
       48:  337:                    else if (!strcmp(algn, "ctr"))
       48:  337-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 5
       43:  338:                        body.align = ctr;
       43:  338-block  0
        -:  339:                }
       64:  340:                auto lvl = ppr->Attribute("lvl");
       64:  340-block  0
call    0 returned 64
branch  1 taken 64 (fallthrough)
branch  2 taken 0 (throw)
       64:  341:                auto buChar = ppr->FirstChildElement("a:buChar");
       64:  341-block  0
call    0 returned 64
branch  1 taken 64 (fallthrough)
branch  2 taken 0 (throw)
       64:  342:                if (buChar != nullptr) {
       64:  342-block  0
branch  0 taken 64 (fallthrough)
branch  1 taken 0
        -:  343://                    auto char_ = buChar->Attribute("char");
        -:  344://                    if (char_ != nullptr && !body.text.empty()) {
        -:  345://                        body.text = std::wstring(1, ' ').append(L"•").append(body.text);
        -:  346://                    }
       64:  347:                } else if (lvl != nullptr) {
       64:  347-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 36
       28:  348:                    auto sizeLvl = strtol(lvl, nullptr, 10);
       28:  348-block  0
call    0 returned 28
       28:  349:                    if (!body.text.empty())
call    0 returned 28
branch  1 taken 5 (fallthrough)
branch  2 taken 23
        5:  350:                        body.text = std::wstring(sizeLvl, ' ').append(L"•").append(body.text);
        5:  350-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  350-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  350-block  2
call    7 returned 5
branch  8 taken 5 (fallthrough)
branch  9 taken 0 (throw)
        5:  350-block  3
call   10 returned 5
branch 11 taken 5 (fallthrough)
branch 12 taken 0 (throw)
        5:  350-block  4
call   13 returned 5
call   14 returned 5
    $$$$$:  350-block  5
call   15 never executed
    $$$$$:  350-block  6
    $$$$$:  350-block  7
call   16 never executed
    $$$$$:  350-block  8
        -:  351:                }
        -:  352:            }
      113:  353:            if (!body.text.empty())
      113:  353-block  0
call    0 returned 113
branch  1 taken 75 (fallthrough)
branch  2 taken 38
       75:  354:                paragraph.emplace_back(body);
       75:  354-block  0
call    0 returned 75
branch  1 taken 75 (fallthrough)
branch  2 taken 0 (throw)
      113:  355:            par = par->NextSiblingElement("a:p");
      113:  355-block  0
call    0 returned 113
branch  1 taken 113 (fallthrough)
branch  2 taken 0 (throw)
      113:  355-block  1
call    3 returned 113
        -:  356:        }
       96:  357:        return paragraph;
       96:  357-block  0
       96:  357-block  1
        -:  358:    }
        -:  359:
function _ZN9docxtotxt14DocumentLoader18parseSharedStringsEPN8tinyxml211XMLDocumentE called 2 returned 100% blocks executed 78%
        2:  360:    void DocumentLoader::parseSharedStrings(XMLDocument *doc) {
        2:  361:        auto *element = doc->FirstChildElement()->FirstChildElement();
        2:  361-block  0
call    0 returned 2
call    1 returned 2
      604:  362:        while (element != nullptr) {
      604:  362-block  0
branch  0 taken 602 (fallthrough)
branch  1 taken 2
      602:  363:            if (!strcmp(element->Value(), "si")) {
      602:  363-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0
      602:  364:                auto si = element->FirstChildElement();
      602:  364-block  0
call    0 returned 602
     1202:  365:                while (si != nullptr) {
     1202:  365-block  0
branch  0 taken 602 (fallthrough)
branch  1 taken 600
      602:  366:                    if (!strcmp(si->Value(), "r")) { // pivotCacheRecords, convert all 'r' to one 't'
      602:  366-block  0
call    0 returned 602
branch  1 taken 2 (fallthrough)
branch  2 taken 600
        4:  367:                        string tmpStr;
        2:  367-block  0
call    0 returned 2
        2:  367-block  1
call    1 returned 2
    $$$$$:  367-block  2
call    2 never executed
        2:  368:                        auto r = element->FirstChildElement();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  368-block  0
       36:  369:                        while (r != nullptr) {
       36:  369-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 2
       34:  370:                            auto t = r->FirstChildElement("t");
       34:  370-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  371:                            if (t != nullptr && t->GetText() != nullptr) {
       34:  371-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 0
       34:  371-block  1
call    2 returned 34
branch  3 taken 34 (fallthrough)
branch  4 taken 0 (throw)
       34:  371-block  2
branch  5 taken 31 (fallthrough)
branch  6 taken 3
       31:  371-block  3
        3:  371-block  4
       34:  371-block  5
branch  7 taken 31 (fallthrough)
branch  8 taken 3
       31:  372:                                tmpStr += t->GetText();
       31:  372-block  0
call    0 returned 31
branch  1 taken 31 (fallthrough)
branch  2 taken 0 (throw)
       31:  372-block  1
call    3 returned 31
branch  4 taken 31 (fallthrough)
branch  5 taken 0 (throw)
        -:  373:                            }
       34:  374:                            r = r->NextSiblingElement();
       34:  374-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:  374-block  1
        -:  375:                        }
        2:  376:                        xlsInfo.sharedStrings.emplace_back(writer.convertString(tmpStr));
        2:  376-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  376-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  376-block  2
call    6 returned 2
    $$$$$:  376-block  3
call    7 never executed
    $$$$$:  376-block  4
        2:  377:                        break;
      600:  378:                    } else if (!strcmp(si->Value(), "t")) {
      600:  378-block  0
call    0 returned 600
branch  1 taken 600 (fallthrough)
branch  2 taken 0
      600:  379:                        auto t = si->GetText();
      600:  379-block  0
call    0 returned 600
      600:  380:                        if (t != nullptr)
branch  0 taken 599 (fallthrough)
branch  1 taken 1
      599:  381:                            xlsInfo.sharedStrings.emplace_back(writer.convertString(t));
      599:  381-block  0
call    0 returned 599
call    1 returned 599
branch  2 taken 599 (fallthrough)
branch  3 taken 0 (throw)
      599:  381-block  1
call    4 returned 599
branch  5 taken 599 (fallthrough)
branch  6 taken 0 (throw)
      599:  381-block  2
call    7 returned 599
branch  8 taken 599 (fallthrough)
branch  9 taken 0 (throw)
      599:  381-block  3
call   10 returned 599
call   11 returned 599
call   12 returned 599
    $$$$$:  381-block  4
call   13 never executed
    $$$$$:  381-block  5
    $$$$$:  381-block  6
call   14 never executed
    $$$$$:  381-block  7
    $$$$$:  381-block  8
call   15 never executed
        -:  382:                        else
        1:  383:                            xlsInfo.sharedStrings.emplace_back(L" ");
        1:  383-block  0
call    0 returned 1
        -:  384:                    }
      600:  385:                    si = si->NextSiblingElement();
      600:  385-block  0
call    0 returned 600
        -:  386:                }
        -:  387:            }
      602:  388:            element = element->NextSiblingElement();
      602:  388-block  0
call    0 returned 602
        -:  389:        }
        2:  390:    }
        2:  390-block  0
        -:  391:
function _ZN9docxtotxt14DocumentLoader13parseWorkbookEPN8tinyxml211XMLDocumentE called 2 returned 100% blocks executed 72%
        2:  392:    void DocumentLoader::parseWorkbook(XMLDocument *doc) {
        2:  393:        auto element = doc->RootElement()->FirstChildElement("sheets")->FirstChildElement();
        2:  393-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        8:  394:        while (element != nullptr) {
        8:  394-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 2
        6:  395:            sheet resultSheet;
        6:  395-block  0
call    0 returned 6
    $$$$$:  395-block  1
call    1 never executed
        6:  396:            resultSheet.sheetName = L"";
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  397:            resultSheet.state = L"";
        6:  397-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  398:            if (!strcmp(element->Value(), "sheet")) {
        6:  398-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  398-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 0
        6:  399:                auto sheetName = element->Attribute("name");
        6:  399-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  400:                if (sheetName != nullptr)
        6:  400-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  401:                    resultSheet.sheetName = writer.convertString(sheetName);
        6:  401-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  401-block  1
call    4 returned 6
branch  5 taken 6 (fallthrough)
branch  6 taken 0 (throw)
        6:  401-block  2
call    7 returned 6
call    8 returned 6
call    9 returned 6
call   10 returned 6
    $$$$$:  401-block  3
call   11 never executed
    $$$$$:  401-block  4
    $$$$$:  401-block  5
call   12 never executed
    $$$$$:  401-block  6
        6:  402:                auto state = element->Attribute("state");
        6:  402-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  403:                if (state != nullptr)
        6:  403-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:  404:                    resultSheet.state = writer.convertString(state);
        2:  404-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  404-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  404-block  2
call    7 returned 2
call    8 returned 2
call    9 returned 2
call   10 returned 2
    $$$$$:  404-block  3
call   11 never executed
    $$$$$:  404-block  4
    $$$$$:  404-block  5
call   12 never executed
    $$$$$:  404-block  6
        6:  405:                xlsInfo.worksheets.emplace_back(resultSheet);
        6:  405-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:  406:            }
        6:  407:            element = element->NextSiblingElement();
        6:  407-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  407-block  1
call    3 returned 6
        -:  408:        }
        2:  409:    }
        2:  409-block  0
        -:  410:
function _ZN9docxtotxt14DocumentLoader9parseDrawEPN8tinyxml211XMLDocumentE called 2 returned 100% blocks executed 62%
        2:  411:    void DocumentLoader::parseDraw(XMLDocument *doc) {
        2:  412:        auto element = doc->RootElement()->FirstChildElement()->FirstChildElement("xdr:pic");
        2:  412-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  412-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  412-block  2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        6:  413:        auto pic = extractPicture(element, "xdr");
        2:  413-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  413-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 2
        2:  413-block  2
call    8 returned 2
    $$$$$:  413-block  3
    $$$$$:  413-block  4
    $$$$$:  413-block  5
call    9 never executed
        2:  414:        xlsInfo.draws.back().pic = pic;
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  415:    }
        -:  416:
function _ZN9docxtotxt14DocumentLoader14parseWorksheetEPN8tinyxml211XMLDocumentE called 6 returned 100% blocks executed 83%
        6:  417:    void DocumentLoader::parseWorksheet(XMLDocument *doc) {
        6:  418:        auto *element = doc->FirstChildElement()->FirstChildElement();
        6:  418-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  418-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
       12:  419:        sheet resultSheet;
        6:  419-block  0
call    0 returned 6
        6:  419-block  1
call    1 returned 6
    $$$$$:  419-block  2
call    2 never executed
       61:  420:        while (element != nullptr) {
       61:  420-block  0
branch  0 taken 55 (fallthrough)
branch  1 taken 6
       55:  421:            if (!strcmp(element->Value(), "sheetViews")) {
       55:  421-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55:  421-block  1
branch  3 taken 49 (fallthrough)
branch  4 taken 6
       49:  422:            } else if (!strcmp(element->Value(), "sheetPr") && element->Attribute("codeName") != nullptr) {
       49:  422-block  0
call    0 returned 49
branch  1 taken 49 (fallthrough)
branch  2 taken 0 (throw)
       49:  422-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 44
        5:  422-block  2
call    5 returned 5
branch  6 taken 5 (fallthrough)
branch  7 taken 0 (throw)
        5:  422-block  3
branch  8 taken 4 (fallthrough)
branch  9 taken 1
        4:  422-block  4
       45:  422-block  5
       49:  422-block  6
branch 10 taken 4 (fallthrough)
branch 11 taken 45
        4:  423:                resultSheet.sheetName = writer.convertString(element->Attribute("codeName"));
        4:  423-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  423-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:  423-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4:  423-block  3
call   10 returned 4
call   11 returned 4
call   12 returned 4
call   13 returned 4
    $$$$$:  423-block  4
call   14 never executed
    $$$$$:  423-block  5
    $$$$$:  423-block  6
call   15 never executed
    $$$$$:  423-block  7
       45:  424:            } else if (!strcmp(element->Value(), "cols")) {
       45:  424-block  0
call    0 returned 45
branch  1 taken 45 (fallthrough)
branch  2 taken 0 (throw)
       45:  424-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 39
        6:  425:                auto col = element->FirstChildElement();
        6:  425-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  425-block  1
       77:  426:                while (col != nullptr) {
       77:  426-block  0
branch  0 taken 71 (fallthrough)
branch  1 taken 6
        -:  427:                    columnSettings tmpCol;
       71:  428:                    if (col->Attribute("min") != nullptr)
       71:  428-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  428-block  1
branch  3 taken 71 (fallthrough)
branch  4 taken 0
       71:  429:                        tmpCol.startInd = strtol(col->Attribute("min"), nullptr, 10) - 1;
       71:  429-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  429-block  1
call    3 returned 71
       71:  430:                    if (col->Attribute("max") != nullptr)
       71:  430-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  430-block  1
branch  3 taken 71 (fallthrough)
branch  4 taken 0
       71:  431:                        tmpCol.endIndInd = strtol(col->Attribute("max"), nullptr, 10) - 1;
       71:  431-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  431-block  1
call    3 returned 71
       71:  432:                    if (col->Attribute("width") != nullptr)
       71:  432-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  432-block  1
branch  3 taken 71 (fallthrough)
branch  4 taken 0
       71:  433:                        tmpCol.width = strtol(col->Attribute("width"), nullptr, 10);
       71:  433-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  433-block  1
call    3 returned 71
       71:  434:                    resultSheet.col.emplace_back(tmpCol);
       71:  434-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  435:                    col = col->NextSiblingElement();
       71:  435-block  0
call    0 returned 71
branch  1 taken 71 (fallthrough)
branch  2 taken 0 (throw)
       71:  435-block  1
        -:  436:                }
       39:  437:            } else if (!strcmp(element->Value(), "sheetData")) {
       39:  437-block  0
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0 (throw)
       39:  437-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 33
        6:  438:                auto sheetData = element->FirstChildElement();
        6:  438-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  438-block  1
      237:  439:                while (sheetData != nullptr) {
      237:  439-block  0
branch  0 taken 231 (fallthrough)
branch  1 taken 6
      231:  440:                    if (!strcmp(sheetData->Value(), "row")) {
      231:  440-block  0
call    0 returned 231
branch  1 taken 231 (fallthrough)
branch  2 taken 0 (throw)
      231:  440-block  1
branch  3 taken 231 (fallthrough)
branch  4 taken 0
      462:  441:                        std::vector<sheetCell> tmpRow;
      231:  441-block  0
call    0 returned 231
      231:  441-block  1
call    1 returned 231
    $$$$$:  441-block  2
call    2 never executed
      231:  442:                        auto row = sheetData->FirstChildElement();
call    0 returned 231
branch  1 taken 231 (fallthrough)
branch  2 taken 0 (throw)
      231:  442-block  0
      462:  443:                        while (row != nullptr) {
      462:  443-block  0
branch  0 taken 231 (fallthrough)
branch  1 taken 231
      231:  443-block  1
      231:  444:                            if (!strcmp(row->Value(), "c")) {
      231:  444-block  0
call    0 returned 231
branch  1 taken 231 (fallthrough)
branch  2 taken 0 (throw)
      231:  444-block  1
branch  3 taken 231 (fallthrough)
branch  4 taken 0
     2030:  445:                                while (row != nullptr) {
     2030:  445-block  0
branch  0 taken 1799 (fallthrough)
branch  1 taken 231
     1799:  446:                                    sheetCell tmpCell = {};
     1799:  446-block  0
call    0 returned 1799
call    1 returned 1799
call    2 returned 1799
    $$$$$:  446-block  1
call    3 never executed
     1799:  447:                                    if (row->Attribute("r") != nullptr) {
call    0 returned 1799
branch  1 taken 1799 (fallthrough)
branch  2 taken 0 (throw)
     1799:  447-block  0
branch  3 taken 1799 (fallthrough)
branch  4 taken 0
     1799:  448:                                        string r = row->Attribute("r");
     1799:  448-block  0
call    0 returned 1799
call    1 returned 1799
branch  2 taken 1799 (fallthrough)
branch  3 taken 0 (throw)
     1799:  448-block  1
call    4 returned 1799
branch  5 taken 1799 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:  448-block  2
    $$$$$:  448-block  3
call    7 never executed
     1799:  449:                                        size_t ii = 0, jj, colVal = 0;
     3627:  450:                                        while (r[ii++] >= 'A') {}
     3627:  450-block  0
call    0 returned 3627
branch  1 taken 3627 (fallthrough)
branch  2 taken 0 (throw)
     3627:  450-block  1
branch  3 taken 1828 (fallthrough)
branch  4 taken 1799
     1828:  450-block  2
     1799:  451:                                        ii--;
     3627:  452:                                        for (jj = 0; jj < ii; jj++)
     1799:  452-block  0
     3627:  452-block  1
branch  0 taken 1828 (fallthrough)
branch  1 taken 1799
     1828:  453:                                            colVal = 26 * colVal + toupper(r[jj]) - 'A' + 1;
     1828:  453-block  0
call    0 returned 1828
branch  1 taken 1828 (fallthrough)
branch  2 taken 0 (throw)
     1828:  453-block  1
     1799:  454:                                        tmpCell.cellNumber = colVal - 1;
     1799:  454-block  0
call    0 returned 1799
        -:  455:                                    }
     1799:  456:                                    if (row->Attribute("t") != nullptr)
     1799:  456-block  0
call    0 returned 1799
branch  1 taken 1799 (fallthrough)
branch  2 taken 0 (throw)
     1799:  456-block  1
branch  3 taken 1062 (fallthrough)
branch  4 taken 737
     1062:  457:                                        tmpCell.type = row->Attribute("t");
     1062:  457-block  0
call    0 returned 1062
branch  1 taken 1062 (fallthrough)
branch  2 taken 0 (throw)
     1062:  457-block  1
call    3 returned 1062
branch  4 taken 1062 (fallthrough)
branch  5 taken 0 (throw)
     3459:  458:                                    if (row->FirstChildElement() != nullptr &&
     1799:  458-block  0
call    0 returned 1799
branch  1 taken 1799 (fallthrough)
branch  2 taken 0 (throw)
     1799:  458-block  1
branch  3 taken 1660 (fallthrough)
branch  4 taken 139
     1624:  458-block  2
      175:  458-block  3
     1799:  458-block  4
branch  5 taken 1624 (fallthrough)
branch  6 taken 175
     1660:  459:                                        row->FirstChildElement()->GetText() != nullptr) {
     1660:  459-block  0
call    0 returned 1660
branch  1 taken 1660 (fallthrough)
branch  2 taken 0 (throw)
     1660:  459-block  1
call    3 returned 1660
branch  4 taken 1660 (fallthrough)
branch  5 taken 0 (throw)
     1660:  459-block  2
branch  6 taken 1624 (fallthrough)
branch  7 taken 36
     1624:  460:                                        if (tmpCell.type == "s") {
     1624:  460-block  0
call    0 returned 1624
branch  1 taken 1024 (fallthrough)
branch  2 taken 600
     1024:  461:                                            auto index = strtol(row->FirstChildElement()->GetText(), nullptr, 10);
     1024:  461-block  0
call    0 returned 1024
branch  1 taken 1024 (fallthrough)
branch  2 taken 0 (throw)
     1024:  461-block  1
call    3 returned 1024
branch  4 taken 1024 (fallthrough)
branch  5 taken 0 (throw)
     1024:  461-block  2
call    6 returned 1024
     1024:  462:                                            tmpCell.text = xlsInfo.sharedStrings[index];
call    0 returned 1024
call    1 returned 1024
branch  2 taken 1024 (fallthrough)
branch  3 taken 0 (throw)
        -:  463:                                        } else {
      600:  464:                                            tmpCell.text = writer.convertString(row->FirstChildElement()->GetText());
      600:  464-block  0
call    0 returned 600
call    1 returned 600
branch  2 taken 600 (fallthrough)
branch  3 taken 0 (throw)
      600:  464-block  1
call    4 returned 600
branch  5 taken 600 (fallthrough)
branch  6 taken 0 (throw)
      600:  464-block  2
call    7 returned 600
branch  8 taken 600 (fallthrough)
branch  9 taken 0 (throw)
      600:  464-block  3
call   10 returned 600
branch 11 taken 600 (fallthrough)
branch 12 taken 0 (throw)
      600:  464-block  4
call   13 returned 600
call   14 returned 600
call   15 returned 600
call   16 returned 600
    $$$$$:  464-block  5
call   17 never executed
    $$$$$:  464-block  6
    $$$$$:  464-block  7
call   18 never executed
    $$$$$:  464-block  8
        -:  465:                                        }
        -:  466:                                    }
     1799:  467:                                    tmpRow.emplace_back(tmpCell);
     1799:  467-block  0
call    0 returned 1799
branch  1 taken 1799 (fallthrough)
branch  2 taken 0 (throw)
     1799:  468:                                    row = row->NextSiblingElement();
     1799:  468-block  0
call    0 returned 1799
branch  1 taken 1799 (fallthrough)
branch  2 taken 0 (throw)
     1799:  468-block  1
call    3 returned 1799
        -:  469:                                }
        -:  470:                            }
      231:  471:                            resultSheet.sheetArray.emplace_back(tmpRow);
      231:  471-block  0
call    0 returned 231
branch  1 taken 231 (fallthrough)
branch  2 taken 0 (throw)
        -:  472:                        }
        -:  473:                    }
      231:  474:                    sheetData = sheetData->NextSiblingElement();
      231:  474-block  0
call    0 returned 231
branch  1 taken 231 (fallthrough)
branch  2 taken 0 (throw)
      231:  474-block  1
        -:  475:                }
       13:  476:                for (auto &sheet: xlsInfo.worksheets) {
        6:  476-block  0
call    0 returned 6
call    1 returned 6
       13:  476-block  1
call    2 returned 13
branch  3 taken 13 (fallthrough)
branch  4 taken 0
       13:  476-block  2
call    5 returned 13
        7:  476-block  3
call    6 returned 7
       13:  477:                    if (sheet.sheetArray.empty()) {
call    0 returned 13
branch  1 taken 6 (fallthrough)
branch  2 taken 7
        6:  478:                        sheet.sheetArray = resultSheet.sheetArray;
        6:  478-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  479:                        sheet.col = resultSheet.col;
        6:  479-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  480:                        break;
        6:  480-block  0
        -:  481:                    }
        -:  482:                }
        -:  483:            }
       55:  484:            element = element->NextSiblingElement();
       55:  484-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55:  484-block  1
        -:  485:        }
        6:  486:    }
        -:  487:
function _ZN9docxtotxt14DocumentLoader11parseStylesEPN8tinyxml211XMLDocumentE called 3 returned 100% blocks executed 100%
        3:  488:    void DocumentLoader::parseStyles(XMLDocument *doc) {
        3:  489:        auto *mainElement = doc->RootElement()->FirstChildElement();
        3:  489-block  0
call    0 returned 3
call    1 returned 3
        3:  490:        if (options.docType == docx) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
      102:  491:            while (mainElement != nullptr) {
      102:  491-block  0
branch  0 taken 99 (fallthrough)
branch  1 taken 3
       99:  492:                if (!strcmp(mainElement->Value(), "w:style")) {
       99:  492-block  0
call    0 returned 99
branch  1 taken 93 (fallthrough)
branch  2 taken 6
       93:  493:                    addStyle(mainElement);
       93:  493-block  0
call    0 returned 93
        6:  494:                } else if (!strcmp(mainElement->Value(), "w:docDefaults")) {
        6:  494-block  0
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        3:  495:                    setDefaultSettings(mainElement);
        3:  495-block  0
call    0 returned 3
        3:  496:                } else if (!strcmp(mainElement->Value(), "w:latentStyles")) {
        3:  496-block  0
call    0 returned 3
        -:  497:                    //skip
        -:  498:                }
       99:  499:                mainElement = mainElement->NextSiblingElement();
       99:  499-block  0
call    0 returned 99
        -:  500:            }
        -:  501:        }
        3:  502:    }
        -:  503:
function _ZN9docxtotxt14DocumentLoader8addStyleEPN8tinyxml210XMLElementE called 93 returned 100% blocks executed 72%
       93:  504:    void DocumentLoader::addStyle(XMLElement *element) {
      186:  505:        string type = element->Attribute("w:type");
       93:  505-block  0
call    0 returned 93
call    1 returned 93
branch  2 taken 93 (fallthrough)
branch  3 taken 0 (throw)
       93:  505-block  1
call    4 returned 93
branch  5 taken 93 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 93
    $$$$$:  505-block  2
    $$$$$:  505-block  3
call    8 never executed
      186:  506:        string styleId = element->Attribute("w:styleId");
call    0 returned 93
call    1 returned 93
branch  2 taken 93 (fallthrough)
branch  3 taken 0 (throw)
       93:  506-block  0
call    4 returned 93
branch  5 taken 93 (fallthrough)
branch  6 taken 0 (throw)
       93:  506-block  1
call    7 returned 93
    $$$$$:  506-block  2
    $$$$$:  506-block  3
call    8 never executed
       93:  507:        bool def = false;
       93:  508:        if (element->Attribute("w:default") != nullptr) {
call    0 returned 93
branch  1 taken 93 (fallthrough)
branch  2 taken 0 (throw)
       93:  508-block  0
branch  3 taken 12 (fallthrough)
branch  4 taken 81
       12:  509:            def = true;
       12:  509-block  0
        -:  510:        }
       93:  511:        if (!strcmp(type.c_str(), "paragraph")) {
       93:  511-block  0
call    0 returned 93
branch  1 taken 45 (fallthrough)
branch  2 taken 48
       90:  512:            paragraphSettings styleSettings = {};
       45:  512-block  0
call    0 returned 45
       45:  512-block  1
call    1 returned 45
    $$$$$:  512-block  2
call    2 never executed
       45:  513:            auto pPr = element->FirstChildElement("w:pPr");
call    0 returned 45
branch  1 taken 45 (fallthrough)
branch  2 taken 0 (throw)
       45:  514:            if (pPr != nullptr) {
       45:  514-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 2
       43:  515:                setIndentation(pPr->FirstChildElement("w:ind"), styleSettings.ind);
       43:  515-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  515-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
       43:  516:                setJustify(pPr->FirstChildElement("w:jc"), styleSettings.justify);
       43:  516-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  516-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
       43:  517:                setSpacing(pPr->FirstChildElement("w:spacing"), styleSettings.spacing);
       43:  517-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  517-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
       43:  518:                setTabulation(pPr->FirstChildElement("w:tabs"), styleSettings.tab);
       43:  518-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  518-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
        -:  519:            }
       45:  520:            if (def) {
       45:  520-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 42
        3:  521:                docInfo.styles.defaultStyles.paragraph = styleSettings;
        3:  521-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  522:            } else {
       42:  523:                docInfo.styles.paragraphStyles.emplace(styleId, styleSettings);
       42:  523-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
        -:  524:            }
        -:  525:        }
        -:  526://        else if (!strcmp(type.c_str(), "table")) {
        -:  527://            tableProperties styleSettings = {};
        -:  528://            auto tblPr = element->FirstChildElement("w:tblPr");
        -:  529://            if (tblPr != nullptr) {
        -:  530://                setJustify(tblPr->FirstChildElement("w:tblInd"), styleSettings.justify);
        -:  531://                docxtotxt::TableParser::setIndentation(tblPr->FirstChildElement("w:jc"), styleSettings.ind);
        -:  532://                docxtotxt::TableParser::setFloatingSettings(tblPr->FirstChildElement("w:tblpPr"),
        -:  533://                                                            styleSettings.floatTable);
        -:  534://            }
        -:  535://            if (def) {
        -:  536://                docInfo.styles.defaultStyles.table = styleSettings;
        -:  537://            } else {
        -:  538://                docInfo.styles.tableStyles.emplace(styleId, styleSettings);
        -:  539://            }
        -:  540://        } else if (!strcmp(type.c_str(), "character")) {
        -:  541://
        -:  542://        } else if (!strcmp(type.c_str(), "numbering")) {
        -:  543://
        -:  544://        }
       93:  545:    }
        -:  546:
function _ZN9docxtotxt14DocumentLoader18setDefaultSettingsEPN8tinyxml210XMLElementE called 3 returned 100% blocks executed 100%
        3:  547:    void DocumentLoader::setDefaultSettings(XMLElement *element) {
        3:  548:        auto *docDefault = element->FirstChildElement();
        3:  548-block  0
call    0 returned 3
        3:  549:        docInfo.defaultSettings.paragraph.justify = justify_t::left;
        9:  550:        while (docDefault != nullptr) {
        9:  550-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  551:            if (!strcmp(docDefault->Value(), "w:rPrDefault")) {//default text properties
        6:  551-block  0
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        -:  552:
        3:  553:            } else if (!strcmp(docDefault->Value(), "w:pPrDefault")) {//default paragraph properties
        3:  553-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  554:                auto pPr = docDefault->FirstChildElement("w:pPr");
        3:  554-block  0
call    0 returned 3
        3:  555:                if (pPr != nullptr) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  556:                    setIndentation(pPr->FirstChildElement("w:ind"),
call    0 returned 3
        3:  557:                                   docInfo.defaultSettings.paragraph.ind);
        3:  557-block  0
call    0 returned 3
        3:  558:                    setJustify(pPr->FirstChildElement("w:jc"),
call    0 returned 3
        3:  559:                               docInfo.defaultSettings.paragraph.justify);
call    0 returned 3
        -:  560:                }
        -:  561:            }
        6:  562:            docDefault = docDefault->NextSiblingElement();
        6:  562-block  0
call    0 returned 6
        -:  563:        }
        3:  564:    }
        -:  565:
function _ZN9docxtotxt14DocumentLoader12loadDocxDataEv called 3 returned 100% blocks executed 64%
        3:  566:    void DocumentLoader::loadDocxData() {
        6:  567:        string docStyles = DOC_STYLES_FILE;
        3:  567-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
    $$$$$:  567-block  1
    $$$$$:  567-block  2
call    5 never executed
        6:  568:        string mainFileNameProperty = DOC_MAIN_FILE;
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
    $$$$$:  568-block  0
    $$$$$:  568-block  1
call    5 never executed
        6:  569:        string footnoteProperty = DOC_FOOTNOTES_FILE;
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 3
    $$$$$:  569-block  0
    $$$$$:  569-block  1
call    5 never executed
        6:  570:        string endnoteProperty = DOC_ENDNOTES_FILE;
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  570-block  0
call    4 returned 3
    $$$$$:  570-block  1
    $$$$$:  570-block  2
call    5 never executed
        3:  571:        openFileAndParse(DOC_IMAGE_FILE_PATH, docInfo.relations, &DocumentLoader::parseRelationShip);
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  571-block  0
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  571-block  1
call    7 returned 3
call    8 returned 3
    $$$$$:  571-block  2
call    9 never executed
    $$$$$:  571-block  3
    $$$$$:  571-block  4
call   10 never executed
    $$$$$:  571-block  5
       54:  572:        for (const auto &kv: this->content_types) {
call    0 returned 3
call    1 returned 3
       54:  572-block  0
call    2 returned 54
branch  3 taken 51 (fallthrough)
branch  4 taken 3
       51:  572-block  1
call    5 returned 51
       51:  572-block  2
call    6 returned 51
       51:  573:            if (starts_with(kv.second, docStyles)) {
call    0 returned 51
branch  1 taken 3 (fallthrough)
branch  2 taken 48
        3:  574:                openFileAndParse(kv.first, &DocumentLoader::parseStyles);
        3:  574-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
       48:  575:            } else if (starts_with(kv.second, footnoteProperty) || starts_with(kv.second, endnoteProperty)) {
       48:  575-block  0
call    0 returned 48
branch  1 taken 45 (fallthrough)
branch  2 taken 3
       45:  575-block  1
call    3 returned 45
branch  4 taken 3 (fallthrough)
branch  5 taken 42
        6:  575-block  2
       42:  575-block  3
       48:  575-block  4
branch  6 taken 6 (fallthrough)
branch  7 taken 42
        6:  576:                openFileAndParse(kv.first, &DocumentLoader::parseDocNotes);
        6:  576-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:  577:            }
        -:  578:        }
       54:  579:        for (const auto &kv: this->content_types) {
        3:  579-block  0
call    0 returned 3
call    1 returned 3
       54:  579-block  1
call    2 returned 54
branch  3 taken 51 (fallthrough)
branch  4 taken 3
       51:  579-block  2
call    5 returned 51
       51:  579-block  3
call    6 returned 51
       51:  580:            if (starts_with(kv.second, mainFileNameProperty)) {
call    0 returned 51
branch  1 taken 3 (fallthrough)
branch  2 taken 48
        3:  581:                openFileAndParse(kv.first, &DocumentLoader::parseDocFile);
        3:  581-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  582:            }
        -:  583:        }
        3:  584:    }
        -:  585:
function _ZN9docxtotxt14DocumentLoader12loadXlsxDataEv called 2 returned 100% blocks executed 67%
        2:  586:    void DocumentLoader::loadXlsxData() {
        4:  587:        string sharedStrings = XLS_SHARED_STRINGS;
        2:  587-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
    $$$$$:  587-block  1
    $$$$$:  587-block  2
call    5 never executed
        4:  588:        string worksheet = XLS_WORKSHEET;
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
    $$$$$:  588-block  0
    $$$$$:  588-block  1
call    5 never executed
        4:  589:        string workbook = XLS_WORKBOOK;
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
    $$$$$:  589-block  0
    $$$$$:  589-block  1
call    5 never executed
        4:  590:        string drawing = XLS_SLIDE_NOTE;
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  590-block  0
call    4 returned 2
    $$$$$:  590-block  1
    $$$$$:  590-block  2
call    5 never executed
        2:  591:        auto worksheetNum = 0;
       32:  592:        for (const auto &kv: this->content_types) {
call    0 returned 2
call    1 returned 2
       32:  592-block  0
call    2 returned 32
branch  3 taken 30 (fallthrough)
branch  4 taken 2
       30:  592-block  1
call    5 returned 30
       30:  592-block  2
call    6 returned 30
       30:  593:            if (starts_with(kv.second, sharedStrings)) {
call    0 returned 30
branch  1 taken 2 (fallthrough)
branch  2 taken 28
        2:  594:                openFileAndParse(kv.first, &DocumentLoader::parseSharedStrings);
        2:  594-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       28:  595:            } else if (starts_with(kv.second, worksheet)) {
       28:  595-block  0
call    0 returned 28
branch  1 taken 6 (fallthrough)
branch  2 taken 22
        6:  596:                string path = kv.first + ".rels";
        6:  596-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  596-block  1
call    3 never executed
        6:  597:                path.insert(path.find_last_of('/', path.length()), "/_rels");
        6:  597-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0 (throw)
        6:  598:                openFileAndParse(kv.first, &DocumentLoader::parseWorksheet);
        6:  598-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  599:                openFileAndParse(path, xlsInfo.worksheets[worksheetNum].relations, &DocumentLoader::parseRelationShip);
        6:  599-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  600:                worksheetNum++;
        6:  600-block  0
call    0 returned 6
       22:  601:            } else if (starts_with(kv.second, workbook)) {
       22:  601-block  0
call    0 returned 22
branch  1 taken 2 (fallthrough)
branch  2 taken 20
        2:  602:                openFileAndParse(kv.first, &DocumentLoader::parseWorkbook);
        2:  602-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       20:  603:            } else if (starts_with(kv.second, drawing)) {
       20:  603-block  0
call    0 returned 20
branch  1 taken 2 (fallthrough)
branch  2 taken 18
        4:  604:                string path = kv.first + ".rels";
        2:  604-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
    $$$$$:  604-block  1
call    4 never executed
        2:  605:                path.insert(path.find_last_of('/', path.length()), "/_rels");
        2:  605-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        4:  606:                draw draw;
        2:  606-block  0
call    0 returned 2
        2:  606-block  1
call    1 returned 2
    $$$$$:  606-block  2
call    2 never executed
        2:  607:                draw.name = kv.first.substr(kv.first.find_last_of('/') + 1);
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  607-block  0
call    4 returned 2
call    5 returned 2
        2:  608:                xlsInfo.draws.emplace_back(draw);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  609:                openFileAndParse(kv.first, &DocumentLoader::parseDraw);
        2:  609-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  610:                openFileAndParse(path, xlsInfo.draws.back().relations, &DocumentLoader::parseRelationShip);
        2:  610-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        -:  611:                //openFileAndParse(kv.first, &DocumentLoader::parseWorkbook);
        -:  612:            }
        -:  613:        }
        2:  614:    }
        -:  615:
function _ZN9docxtotxt14DocumentLoader12loadPptxDataEv called 2 returned 100% blocks executed 67%
        2:  616:    void DocumentLoader::loadPptxData() {
        4:  617:        string slideContentType = PPT_SLIDE_CONTENT_TYPE;
        2:  617-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
    $$$$$:  617-block  1
    $$$$$:  617-block  2
call    5 never executed
        4:  618:        string presentationSettings = PPT_MAIN_FILE;
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 2
    $$$$$:  618-block  0
    $$$$$:  618-block  1
call    5 never executed
        4:  619:        string presentationNote = PPT_SLIDE_NOTE;
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  619-block  0
call    4 returned 2
    $$$$$:  619-block  1
    $$$$$:  619-block  2
call    5 never executed
       67:  620:        for (const auto &kv: this->content_types) {
call    0 returned 2
call    1 returned 2
       67:  620-block  0
call    2 returned 67
branch  3 taken 65 (fallthrough)
branch  4 taken 2
       65:  620-block  1
call    5 returned 65
       65:  620-block  2
call    6 returned 65
       65:  621:            if (starts_with(kv.second, slideContentType)) {
call    0 returned 65
branch  1 taken 15 (fallthrough)
branch  2 taken 50
       30:  622:                string path = kv.first + ".rels";
       15:  622-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  622-block  1
call    3 returned 15
    $$$$$:  622-block  2
call    4 never executed
       15:  623:                path.insert(path.find_last_of('/', path.length()), "/_rels");
       15:  623-block  0
call    0 returned 15
call    1 returned 15
call    2 returned 15
branch  3 taken 15 (fallthrough)
branch  4 taken 0 (throw)
       15:  624:                openFileAndParse(kv.first, &DocumentLoader::parsePresentationSlide);
       15:  624-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  625:                openFileAndParse(path, pptInfo.slides.back().relations, &DocumentLoader::parseRelationShip);
       15:  625-block  0
call    0 returned 15
call    1 returned 15
branch  2 taken 15 (fallthrough)
branch  3 taken 0 (throw)
       50:  626:            } else if (starts_with(kv.second, presentationSettings)) {
       50:  626-block  0
call    0 returned 50
branch  1 taken 2 (fallthrough)
branch  2 taken 48
        2:  627:                openFileAndParse(kv.first, &DocumentLoader::parsePresentationSettings);
        2:  627-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       48:  628:            } else if (starts_with(kv.second, presentationNote)) {
       48:  628-block  0
call    0 returned 48
branch  1 taken 3 (fallthrough)
branch  2 taken 45
        6:  629:                noteInfo_t noteInfo;
        3:  629-block  0
call    0 returned 3
        3:  629-block  1
call    1 returned 3
    $$$$$:  629-block  2
call    2 never executed
        3:  630:                noteInfo.noteName = kv.first.substr(kv.first.find_last_of('/') + 1);
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  630-block  0
call    4 returned 3
call    5 returned 3
        3:  631:                pptInfo.notes.emplace_back(noteInfo);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  632:                openFileAndParse(kv.first, &DocumentLoader::parseSlideNote);
        3:  632-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  633:            }
        -:  634:        }
        2:  635:    }
        -:  636:
function _ZNK9docxtotxt14DocumentLoader11getDocxDataEv called 3 returned 100% blocks executed 100%
        3:  637:    docInfo_t DocumentLoader::getDocxData() const {
        3:  638:        return docInfo;
        3:  638-block  0
call    0 returned 3
        -:  639:    }
        -:  640:
function _ZNK9docxtotxt14DocumentLoader11getXlsxDataEv called 2 returned 100% blocks executed 100%
        2:  641:    xlsInfo_t DocumentLoader::getXlsxData() const {
        2:  642:        return this->xlsInfo;
        2:  642-block  0
call    0 returned 2
        -:  643:    }
        -:  644:
function _ZNK9docxtotxt14DocumentLoader11getPptxDataEv called 2 returned 100% blocks executed 100%
        2:  645:    pptInfo_t DocumentLoader::getPptxData() const {
        2:  646:        return pptInfo;
        2:  646-block  0
call    0 returned 2
        -:  647:    }
        -:  648:
function _ZN9docxtotxt14DocumentLoader12parseSectionEPN8tinyxml210XMLElementE called 3 returned 100% blocks executed 100%
        3:  649:    void DocumentLoader::parseSection(XMLElement *section) {
        3:  650:        XMLElement *sectionProperty = section->FirstChildElement("w:pgSz");
        3:  650-block  0
call    0 returned 3
        3:  651:        if (sectionProperty != nullptr) {
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  652:            if (sectionProperty->Attribute("w:w") != nullptr)
        3:  652-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  653:                this->docInfo.docWidth = strtol(sectionProperty->Attribute("w:w"), nullptr, 10) / TWIP_TO_CHARACTER;
        3:  653-block  0
call    0 returned 3
call    1 returned 3
        3:  654:            if (sectionProperty->Attribute("w:h") != nullptr)
        3:  654-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  655:                this->docInfo.docHeight = strtol(sectionProperty->Attribute("w:h"), nullptr, 10) / TWIP_TO_CHARACTER;
        3:  655-block  0
call    0 returned 3
call    1 returned 3
        -:  656:        }
        3:  657:    }
        -:  658:
function _ZN9docxtotxt14DocumentLoader12parseDocFileEPN8tinyxml211XMLDocumentE called 3 returned 100% blocks executed 93%
        3:  659:    void DocumentLoader::parseDocFile(XMLDocument *doc) {
        3:  660:        XMLElement *section = doc->RootElement()->FirstChildElement()->FirstChildElement("w:sectPr");
        3:  660-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        3:  661:        parseSection(section);
call    0 returned 3
        3:  662:        auto mainElement = doc->RootElement()->FirstChildElement()->FirstChildElement();
call    0 returned 3
call    1 returned 3
call    2 returned 3
      311:  663:        while (mainElement != nullptr) {
      311:  663-block  0
branch  0 taken 308 (fallthrough)
branch  1 taken 3
      308:  664:            paragraph par;
      308:  664-block  0
call    0 returned 308
    $$$$$:  664-block  1
call    1 never executed
      308:  665:            par.type = paragraphType::par;
      308:  666:            if (!strcmp(mainElement->Value(), "w:p")) {
call    0 returned 308
branch  1 taken 308 (fallthrough)
branch  2 taken 0 (throw)
      308:  666-block  0
branch  3 taken 291 (fallthrough)
branch  4 taken 17
      291:  667:                parseParagraph(mainElement, par);
      291:  667-block  0
call    0 returned 291
branch  1 taken 291 (fallthrough)
branch  2 taken 0 (throw)
       17:  668:            } else if (!strcmp(mainElement->Value(), "w:tbl")) {
       17:  668-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
       17:  668-block  1
branch  3 taken 8 (fallthrough)
branch  4 taken 9
        8:  669:                par.type = paragraphType::table;
        8:  670:                parseTable(mainElement, par, (options.flags >> 5) & 1);
        8:  670-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        9:  671:            } else if (!strcmp(mainElement->Value(), "w:sdt")) {
        9:  671-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  671-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 6
        3:  672:                auto sdtContent = mainElement->FirstChildElement("w:sdtContent");
        3:  672-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  673:                if (sdtContent != nullptr) {
        3:  673-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  674:                    addSdtContent(sdtContent, docInfo.body);
        3:  674-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  675:                }
        -:  676:            }
      308:  677:            docInfo.body.emplace_back(par);
      308:  677-block  0
call    0 returned 308
branch  1 taken 308 (fallthrough)
branch  2 taken 0 (throw)
      308:  678:            mainElement = mainElement->NextSiblingElement();
      308:  678-block  0
call    0 returned 308
branch  1 taken 308 (fallthrough)
branch  2 taken 0 (throw)
      308:  678-block  1
call    3 returned 308
        -:  679:        }
        3:  680:    }
        3:  680-block  0
        -:  681:
function _ZN9docxtotxt14DocumentLoader14parseParagraphEPN8tinyxml210XMLElementERNS_9paragraphE called 626 returned 100% blocks executed 77%
      626:  682:    void DocumentLoader::parseParagraph(XMLElement *element, paragraph &par) {
      626:  683:        par.body.emplace_back();
      626:  683-block  0
call    0 returned 626
      626:  684:        auto pPr = element->FirstChildElement("w:pPr");
call    0 returned 626
      626:  685:        if (pPr == nullptr) {
branch  0 taken 100 (fallthrough)
branch  1 taken 526
      100:  686:            par.settings = docInfo.styles.defaultStyles.paragraph;
      100:  686-block  0
call    0 returned 100
        -:  687:        } else {
      526:  688:            auto pStyle = pPr->FirstChildElement("w:pStyle");
      526:  688-block  0
call    0 returned 526
      526:  689:            if (pStyle == nullptr) {
branch  0 taken 378 (fallthrough)
branch  1 taken 148
      378:  690:                par.settings = docInfo.styles.defaultStyles.paragraph;
      378:  690-block  0
call    0 returned 378
        -:  691:            } else {
      148:  692:                par.settings = docInfo.styles.paragraphStyles[pStyle->Attribute("w:val")];
      148:  692-block  0
call    0 returned 148
call    1 returned 148
branch  2 taken 148 (fallthrough)
branch  3 taken 0 (throw)
      148:  692-block  1
call    4 returned 148
branch  5 taken 148 (fallthrough)
branch  6 taken 0 (throw)
      148:  692-block  2
call    7 returned 148
branch  8 taken 148 (fallthrough)
branch  9 taken 0 (throw)
      148:  692-block  3
call   10 returned 148
branch 11 taken 148 (fallthrough)
branch 12 taken 0 (throw)
      148:  692-block  4
call   13 returned 148
call   14 returned 148
    $$$$$:  692-block  5
call   15 never executed
    $$$$$:  692-block  6
    $$$$$:  692-block  7
call   16 never executed
    $$$$$:  692-block  8
call   17 never executed
        -:  693:            }
      526:  694:            XMLElement *paragraphProperty = pPr->FirstChildElement();
      526:  694-block  0
call    0 returned 526
      526:  695:            if (paragraphProperty->FirstAttribute())
call    0 returned 526
branch  1 taken 470 (fallthrough)
branch  2 taken 56
     1474:  696:                while (paragraphProperty != nullptr) {
     1474:  696-block  0
branch  0 taken 1004 (fallthrough)
branch  1 taken 470
     1106:  697:                    if (!strcmp(paragraphProperty->Value(), "w:ind") &&
     1004:  697-block  0
call    0 returned 1004
branch  1 taken 102 (fallthrough)
branch  2 taken 902
branch  3 taken 102 (fallthrough)
branch  4 taken 0
      102:  697-block  1
      902:  697-block  2
     1004:  697-block  3
branch  5 taken 102 (fallthrough)
branch  6 taken 902
      102:  698:                        paragraphProperty->FirstAttribute() != nullptr) {
      102:  698-block  0
call    0 returned 102
      102:  699:                        setIndentation(paragraphProperty, par.settings.ind);
      102:  699-block  0
call    0 returned 102
     1081:  700:                    } else if (!strcmp(paragraphProperty->Value(), "w:jc") &&
      902:  700-block  0
call    0 returned 902
branch  1 taken 179 (fallthrough)
branch  2 taken 723
branch  3 taken 179 (fallthrough)
branch  4 taken 0
      179:  700-block  1
      723:  700-block  2
      902:  700-block  3
branch  5 taken 179 (fallthrough)
branch  6 taken 723
      179:  701:                               paragraphProperty->FirstAttribute() != nullptr) {
      179:  701-block  0
call    0 returned 179
      179:  702:                        setJustify(paragraphProperty, par.settings.justify);
      179:  702-block  0
call    0 returned 179
      723:  703:                    } else if (!strcmp(paragraphProperty->Value(), "w:numPr")) {
      723:  703-block  0
call    0 returned 723
branch  1 taken 25 (fallthrough)
branch  2 taken 698
       25:  704:                        XMLElement *enumProperty = paragraphProperty->FirstChildElement();
       25:  704-block  0
call    0 returned 25
       25:  705:                        if (!strcmp(enumProperty->Value(), "w:ilvl")) {
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0
       25:  706:                            if (enumProperty->FirstAttribute() != nullptr) {
       25:  706-block  0
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0
       25:  707:                                size_t indentationSize = enumProperty->FirstAttribute()->IntValue();
       25:  707-block  0
call    0 returned 25
call    1 returned 25
       25:  708:                                par.body.back().append(
call    0 returned 25
       25:  709:                                        writer.convertString(std::string(indentationSize, ' ') + (" · ")));
call    0 returned 25
call    1 returned 25
branch  2 taken 25 (fallthrough)
branch  3 taken 0 (throw)
       25:  709-block  0
call    4 returned 25
branch  5 taken 25 (fallthrough)
branch  6 taken 0 (throw)
       25:  709-block  1
call    7 returned 25
branch  8 taken 25 (fallthrough)
branch  9 taken 0 (throw)
       25:  709-block  2
call   10 returned 25
branch 11 taken 25 (fallthrough)
branch 12 taken 0 (throw)
       25:  709-block  3
call   13 returned 25
call   14 returned 25
call   15 returned 25
call   16 returned 25
    $$$$$:  709-block  4
call   17 never executed
    $$$$$:  709-block  5
    $$$$$:  709-block  6
call   18 never executed
    $$$$$:  709-block  7
    $$$$$:  709-block  8
call   19 never executed
    $$$$$:  709-block  9
    $$$$$:  709-block 10
call   20 never executed
    $$$$$:  709-block 11
call   21 never executed
        -:  710:                            }
        -:  711:                        }
       25:  712:                        setJustify(enumProperty, par.settings.justify);
       25:  712-block  0
call    0 returned 25
      707:  713:                    } else if (!strcmp(paragraphProperty->Value(), "w:outlineLvl") &&
      698:  713-block  0
call    0 returned 698
branch  1 taken 9 (fallthrough)
branch  2 taken 689
branch  3 taken 9 (fallthrough)
branch  4 taken 0
        9:  713-block  1
      689:  713-block  2
      698:  713-block  3
branch  5 taken 9 (fallthrough)
branch  6 taken 689
        9:  714:                               paragraphProperty->FirstAttribute() != nullptr) {
        9:  714-block  0
call    0 returned 9
        9:  715:                        par.settings.outline = true;
        9:  715-block  0
      807:  716:                    } else if (!strcmp(paragraphProperty->Value(), "w:spacing") &&
      689:  716-block  0
call    0 returned 689
branch  1 taken 118 (fallthrough)
branch  2 taken 571
branch  3 taken 118 (fallthrough)
branch  4 taken 0
      118:  716-block  1
      571:  716-block  2
      689:  716-block  3
branch  5 taken 118 (fallthrough)
branch  6 taken 571
      118:  717:                               paragraphProperty->FirstAttribute() != nullptr) {
      118:  717-block  0
call    0 returned 118
      118:  718:                        setSpacing(paragraphProperty, par.settings.spacing);
      118:  718-block  0
call    0 returned 118
      602:  719:                    } else if (!strcmp(paragraphProperty->Value(), "w:tabs") &&
      571:  719-block  0
call    0 returned 571
branch  1 taken 31 (fallthrough)
branch  2 taken 540
       31:  719-block  1
      540:  719-block  2
      571:  719-block  3
branch  3 taken 31 (fallthrough)
branch  4 taken 540
       31:  720:                               paragraphProperty->FirstChildElement() != nullptr) {
       31:  720-block  0
call    0 returned 31
branch  1 taken 31 (fallthrough)
branch  2 taken 0
       31:  721:                        setTabulation(paragraphProperty, par.settings.tab);
       31:  721-block  0
call    0 returned 31
        -:  722:                    }
     1004:  723:                    paragraphProperty = paragraphProperty->NextSiblingElement();
     1004:  723-block  0
call    0 returned 1004
        -:  724:                }
        -:  725:        }
      626:  726:        XMLElement *property = element->FirstChildElement();
      626:  726-block  0
call    0 returned 626
     2213:  727:        while (property != nullptr) {
     2213:  727-block  0
branch  0 taken 1587 (fallthrough)
branch  1 taken 626
     1587:  728:            if (!strcmp(property->Value(), "w:r")) {
     1587:  728-block  0
call    0 returned 1587
branch  1 taken 946 (fallthrough)
branch  2 taken 641
      946:  729:                parseTextProperties(property, par);
      946:  729-block  0
call    0 returned 946
      641:  730:            } else if (!strcmp(property->Value(), "w:hyperlink")) {
      641:  730-block  0
call    0 returned 641
branch  1 taken 33 (fallthrough)
branch  2 taken 608
       33:  731:                XMLElement *linkProp = property->FirstChildElement();
       33:  731-block  0
call    0 returned 33
      283:  732:                while (linkProp != nullptr) {
      283:  732-block  0
branch  0 taken 250 (fallthrough)
branch  1 taken 33
      250:  733:                    if (!strcmp(linkProp->Value(), "w:r")) {
      250:  733-block  0
call    0 returned 250
branch  1 taken 250 (fallthrough)
branch  2 taken 0
      250:  734:                        parseTextProperties(linkProp, par);
      250:  734-block  0
call    0 returned 250
        -:  735:                    }
      250:  736:                    linkProp = linkProp->NextSiblingElement();
      250:  736-block  0
call    0 returned 250
        -:  737:                }
       33:  738:                if ((options.flags >> 2) & 1) {
       33:  738-block  0
branch  0 taken 33 (fallthrough)
branch  1 taken 0
       33:  739:                    if (property->Attribute("r:id") != nullptr) {
       33:  739-block  0
call    0 returned 33
branch  1 taken 1 (fallthrough)
branch  2 taken 32
        1:  740:                        auto id = property->Attribute("r:id");
        1:  740-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  741:                        auto number = distance(docInfo.relations.hyperlinkRelationship.begin(),
        1:  741-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  741-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  741-block  2
call    7 returned 1
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  741-block  3
call   11 returned 1
call   12 returned 1
    $$$$$:  741-block  4
call   13 never executed
    $$$$$:  741-block  5
    $$$$$:  741-block  6
call   14 never executed
    $$$$$:  741-block  7
        -:  742:                                               docInfo.relations.hyperlinkRelationship.find(id));//very doubtful
        2:  743:                        auto result = string("{h").append(to_string(number).append("}"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  743-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  743-block  1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:  743-block  2
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:  743-block  3
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
call   16 returned 1
call   17 returned 1
    $$$$$:  743-block  4
    $$$$$:  743-block  5
    $$$$$:  743-block  6
    $$$$$:  743-block  7
call   18 never executed
        1:  744:                        par.body.back().append(writer.convertString(result));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  744-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  744-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  744-block  2
call    9 never executed
    $$$$$:  744-block  3
        -:  745:                    }
        -:  746:                }
        -:  747:            } else {
        -:  748:                //throw runtime_error(string("Unexpected child element: ") + string(property->Value()));
        -:  749:            }
     1587:  750:            property = property->NextSiblingElement();
     1587:  750-block  0
call    0 returned 1587
        -:  751:        }
      626:  752:        free(property);
      626:  753:    }
      626:  753-block  0
        -:  754:
function _ZN9docxtotxt14DocumentLoader19parseTextPropertiesEPN8tinyxml210XMLElementERNS_9paragraphE called 1196 returned 100% blocks executed 61%
     1196:  755:    void DocumentLoader::parseTextProperties(XMLElement *properties, paragraph &par) {
     1196:  756:        XMLElement *textProperty = properties->FirstChildElement();
     1196:  756-block  0
call    0 returned 1196
     3154:  757:        while (textProperty != nullptr) {
     3154:  757-block  0
branch  0 taken 1958 (fallthrough)
branch  1 taken 1196
     1958:  758:            if (!strcmp(textProperty->Value(), "w:drawing")) {
     1958:  758-block  0
call    0 returned 1958
branch  1 taken 32 (fallthrough)
branch  2 taken 1926
       32:  759:                auto current_element = textProperty->FirstChildElement()->FirstChildElement();
       32:  759-block  0
call    0 returned 32
call    1 returned 32
      204:  760:                while (current_element != nullptr) {
      204:  760-block  0
branch  0 taken 172 (fallthrough)
branch  1 taken 32
      172:  761:                    if (!strcmp(current_element->Value(), "a:graphic")) {
      172:  761-block  0
call    0 returned 172
branch  1 taken 32 (fallthrough)
branch  2 taken 140
       32:  762:                        if (current_element->FirstChildElement("a:graphicData") != nullptr) {
       32:  762-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0
       32:  763:                            if (current_element->FirstChildElement("a:graphicData")->FirstChildElement(
       32:  763-block  0
call    0 returned 32
call    1 returned 32
       32:  764:                                    "pic:pic") != nullptr) {
branch  0 taken 32 (fallthrough)
branch  1 taken 0
       32:  765:                                auto picElement = current_element->FirstChildElement(
       32:  765-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:  766:                                        "a:graphicData")->FirstChildElement(
       32:  766-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
        -:  767:                                        "pic:pic");
       96:  768:                                auto pic = extractPicture(picElement, "pic");
       32:  768-block  0
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0 (throw)
       32:  768-block  1
call    4 returned 32
branch  5 taken 32 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 32
call    8 returned 32
    $$$$$:  768-block  2
    $$$$$:  768-block  3
    $$$$$:  768-block  4
call    9 never executed
       32:  769:                                par.type = paragraphType::image;
       64:  770:                                auto imageName = docInfo.relations.imageRelationship[pic.rId];
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:  770-block  0
call    3 returned 32
branch  4 taken 32 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 32
    $$$$$:  770-block  1
call    7 never executed
       32:  771:                                auto width = pic.objectInfo.objectSizeX / 76200;
       32:  772:                                auto height = pic.objectInfo.objectSizeY / 76200;
       32:  773:                                auto mediumLine = width - 2;
       32:  774:                                auto leftBorder = (docInfo.docWidth - width) / 2;
       64:  775:                                wstring path = L"Media file.";
       32:  775-block  0
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0 (throw)
       32:  775-block  1
call    4 returned 32
    $$$$$:  775-block  2
    $$$$$:  775-block  3
call    5 never executed
       32:  776:                                par.body.emplace_back(path);
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:  777:                                if ((width < 3 || height < 3)) {
       32:  777-block  0
branch  0 taken 31 (fallthrough)
branch  1 taken 1
       31:  777-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 31
        2:  778:                                    wstring imageInfo = wstring(L" Image is too small to display");
        1:  778-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  778-block  1
call    4 returned 1
    $$$$$:  778-block  2
    $$$$$:  778-block  3
call    5 never executed
        1:  779:                                    par.body.back().append(imageInfo);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  780:                                }
       32:  781:                                if ((options.flags >> 1) & 1) {
       32:  781-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 0
       64:  782:                                    wstring imageInfo = wstring(L"Saved to path: ") +
       32:  782-block  0
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 32
call    5 returned 32
    $$$$$:  782-block  1
    $$$$$:  782-block  2
       64:  783:                                                        writer.convertString(
       32:  783-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 32
    $$$$$:  783-block  1
      128:  784:                                                                this->options.pathToDraws + '/' + imageName);
       32:  784-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:  784-block  1
call    3 returned 32
branch  4 taken 32 (fallthrough)
branch  5 taken 0 (throw)
       32:  784-block  2
call    6 returned 32
branch  7 taken 32 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 32
       32:  784-block  3
call   10 returned 32
    $$$$$:  784-block  4
    $$$$$:  784-block  5
    $$$$$:  784-block  6
call   11 never executed
       32:  785:                                    par.body.emplace_back(imageInfo);
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
        -:  786:                                }
       32:  787:                                if (width > 3 || height > 3) {
       32:  787-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 30
        2:  787-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2
       30:  788:                                    par.body.emplace_back(
       30:  788-block  0
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0 (throw)
       60:  789:                                            std::wstring(1, L'+').append(mediumLine, L'—').append(1, L'+'));
       30:  789-block  0
call    0 returned 30
call    1 returned 30
branch  2 taken 30 (fallthrough)
branch  3 taken 0 (throw)
       30:  789-block  1
call    4 returned 30
branch  5 taken 30 (fallthrough)
branch  6 taken 0 (throw)
       30:  789-block  2
call    7 returned 30
branch  8 taken 30 (fallthrough)
branch  9 taken 0 (throw)
       30:  789-block  3
call   10 returned 30
call   11 returned 30
    $$$$$:  789-block  4
call   12 never executed
    $$$$$:  789-block  5
    $$$$$:  789-block  6
call   13 never executed
    $$$$$:  789-block  7
      509:  790:                                    for (int i = 1; i < height - 1; i++) {
      509:  790-block  0
branch  0 taken 479 (fallthrough)
branch  1 taken 30
      479:  791:                                        par.body.emplace_back(L"|" + std::wstring(mediumLine, L' ') + L"|");
      479:  791-block  0
call    0 returned 479
call    1 returned 479
branch  2 taken 479 (fallthrough)
branch  3 taken 0 (throw)
      479:  791-block  1
call    4 returned 479
branch  5 taken 479 (fallthrough)
branch  6 taken 0 (throw)
      479:  791-block  2
call    7 returned 479
branch  8 taken 479 (fallthrough)
branch  9 taken 0 (throw)
      479:  791-block  3
call   10 returned 479
branch 11 taken 479 (fallthrough)
branch 12 taken 0 (throw)
      479:  791-block  4
call   13 returned 479
call   14 returned 479
call   15 returned 479
call   16 returned 479
    $$$$$:  791-block  5
call   17 never executed
    $$$$$:  791-block  6
    $$$$$:  791-block  7
call   18 never executed
    $$$$$:  791-block  8
    $$$$$:  791-block  9
call   19 never executed
    $$$$$:  791-block 10
    $$$$$:  791-block 11
call   20 never executed
    $$$$$:  791-block 12
        -:  792:                                    }
       30:  793:                                    par.body.emplace_back(
       30:  793-block  0
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0 (throw)
       60:  794:                                            std::wstring(1, L'+').append(mediumLine, L'—').append(1, L'+'));
       30:  794-block  0
call    0 returned 30
call    1 returned 30
branch  2 taken 30 (fallthrough)
branch  3 taken 0 (throw)
       30:  794-block  1
call    4 returned 30
branch  5 taken 30 (fallthrough)
branch  6 taken 0 (throw)
       30:  794-block  2
call    7 returned 30
branch  8 taken 30 (fallthrough)
branch  9 taken 0 (throw)
       30:  794-block  3
call   10 returned 30
call   11 returned 30
    $$$$$:  794-block  4
call   12 never executed
    $$$$$:  794-block  5
    $$$$$:  794-block  6
call   13 never executed
    $$$$$:  794-block  7
        -:  795:
        -:  796:                                }
       32:  797:                                par.body.emplace_back();
       32:  797-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
        -:  798:                            }
        -:  799:                        }
        -:  800:
        -:  801:                    }
      172:  802:                    current_element = current_element->NextSiblingElement();
      172:  802-block  0
call    0 returned 172
        -:  803:                }
     1926:  804:            } else if (!strcmp(textProperty->Value(), "w:t")) {
     1926:  804-block  0
call    0 returned 1926
branch  1 taken 955 (fallthrough)
branch  2 taken 971
      955:  805:                auto text = textProperty->GetText();
      955:  805-block  0
call    0 returned 955
      955:  806:                if (text == nullptr)
branch  0 taken 51 (fallthrough)
branch  1 taken 904
       51:  807:                    par.body.back().append(L" ");
       51:  807-block  0
call    0 returned 51
call    1 returned 51
        -:  808:                else
      904:  809:                    par.body.back().append(writer.convertString(text));
      904:  809-block  0
call    0 returned 904
call    1 returned 904
call    2 returned 904
branch  3 taken 904 (fallthrough)
branch  4 taken 0 (throw)
      904:  809-block  1
call    5 returned 904
branch  6 taken 904 (fallthrough)
branch  7 taken 0 (throw)
      904:  809-block  2
call    8 returned 904
branch  9 taken 904 (fallthrough)
branch 10 taken 0 (throw)
      904:  809-block  3
call   11 returned 904
call   12 returned 904
call   13 returned 904
    $$$$$:  809-block  4
call   14 never executed
    $$$$$:  809-block  5
    $$$$$:  809-block  6
call   15 never executed
    $$$$$:  809-block  7
    $$$$$:  809-block  8
call   16 never executed
    $$$$$:  809-block  9
call   17 never executed
      971:  810:            } else if (!strcmp(textProperty->Value(), "w:tab")) {
      971:  810-block  0
call    0 returned 971
branch  1 taken 37 (fallthrough)
branch  2 taken 934
       37:  811:                if (par.settings.tab.empty()) {
       37:  811-block  0
call    0 returned 37
branch  1 taken 6 (fallthrough)
branch  2 taken 31
        6:  812:                    par.body.back().append(L"   ");
        6:  812-block  0
call    0 returned 6
call    1 returned 6
        -:  813:                } else {
       31:  814:                    auto tab = par.settings.tab.front();
       31:  814-block  0
call    0 returned 31
       31:  815:                    auto pos = tab.pos;
       31:  816:                    char symbol = ' ';
       31:  817:                    if (tab.character == dot)
branch  0 taken 31 (fallthrough)
branch  1 taken 0
       31:  818:                        symbol = '.';
       31:  818-block  0
       31:  819:                    auto currentSize = par.body.back().length();
       31:  819-block  0
call    0 returned 31
call    1 returned 31
       31:  820:                    auto ind = par.settings.ind.left;
       31:  821:                    if (ind != 0)
branch  0 taken 13 (fallthrough)
branch  1 taken 18
       13:  822:                        currentSize += ind;
       13:  822-block  0
       31:  823:                    if (pos > currentSize)
       31:  823-block  0
branch  0 taken 31 (fallthrough)
branch  1 taken 0
       31:  824:                        par.body.back().append(pos - currentSize, symbol);
       31:  824-block  0
call    0 returned 31
call    1 returned 31
branch  2 taken 31 (fallthrough)
branch  3 taken 0 (throw)
       31:  825:                    par.settings.tab.erase(par.settings.tab.begin());
       31:  825-block  0
call    0 returned 31
call    1 returned 31
call    2 returned 31
branch  3 taken 31 (fallthrough)
branch  4 taken 0 (throw)
       31:  825-block  1
    $$$$$:  825-block  2
    $$$$$:  825-block  3
        -:  826:                }
      934:  827:            } else if(!strcmp(textProperty->Value(), "w:footnoteReference")) {
      934:  827-block  0
call    0 returned 934
branch  1 taken 1 (fallthrough)
branch  2 taken 933
        1:  828:                auto id = textProperty->Attribute("w:id");
        1:  828-block  0
call    0 returned 1
        1:  829:                if(id!= nullptr)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  830:                    par.body.back().append(L"{footnote" + writer.convertString(id) + L"}");
        1:  830-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  830-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  830-block  2
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  830-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1:  830-block  4
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1:  830-block  5
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
    $$$$$:  830-block  6
call   22 never executed
    $$$$$:  830-block  7
    $$$$$:  830-block  8
call   23 never executed
    $$$$$:  830-block  9
    $$$$$:  830-block 10
call   24 never executed
    $$$$$:  830-block 11
    $$$$$:  830-block 12
call   25 never executed
    $$$$$:  830-block 13
    $$$$$:  830-block 14
call   26 never executed
    $$$$$:  830-block 15
call   27 never executed
      933:  831:            } else if(!strcmp(textProperty->Value(), "w:endnoteReference")) {
      933:  831-block  0
call    0 returned 933
branch  1 taken 1 (fallthrough)
branch  2 taken 932
        1:  832:                auto id = textProperty->Attribute("w:id");
        1:  832-block  0
call    0 returned 1
        1:  833:                if(id!= nullptr)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  834:                    par.body.back().append(L"{endnote" + writer.convertString(id) + L"}");
        1:  834-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  834-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  834-block  2
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  834-block  3
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1:  834-block  4
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1:  834-block  5
call   17 returned 1
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
    $$$$$:  834-block  6
call   22 never executed
    $$$$$:  834-block  7
    $$$$$:  834-block  8
call   23 never executed
    $$$$$:  834-block  9
    $$$$$:  834-block 10
call   24 never executed
    $$$$$:  834-block 11
    $$$$$:  834-block 12
call   25 never executed
    $$$$$:  834-block 13
    $$$$$:  834-block 14
call   26 never executed
        -:  835:            }
     1958:  836:            textProperty = textProperty->NextSiblingElement();
     1958:  836-block  0
call    0 returned 1958
        -:  837:        }
     1196:  838:    }
     1196:  838-block  0
        -:  839:
function _ZN9docxtotxt14DocumentLoader10parseTableEPN8tinyxml210XMLElementERNS_9paragraphEb called 9 returned 100% blocks executed 79%
        9:  840:    void DocumentLoader::parseTable(XMLElement *tableElem, ::docxtotxt::paragraph &par, const bool raw) {
        9:  841:        XMLElement *element = tableElem->FirstChildElement();
        9:  841-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
       18:  842:        tableSetting settings;
        9:  842-block  0
call    0 returned 9
        9:  842-block  1
call    1 returned 9
    $$$$$:  842-block  2
call    2 never executed
        9:  843:        size_t line = 0;
        9:  844:        size_t currentColumn = 0;
       81:  845:        while (element != nullptr) {
       81:  845-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 9
        -:  846://            if (!strcmp(element->Value(), "w:tblPr")) {// table Properties
        -:  847://                auto tblStyle = element->FirstChildElement("w:tblStyle");
        -:  848://                if (tblStyle == nullptr) {
        -:  849://                    settings.settings = docInfo.styles.defaultStyles.table;
        -:  850://                } else {
        -:  851://                    settings.settings = docInfo.styles.tableStyles[tblStyle->Attribute("w:val")];
        -:  852://                }
        -:  853://                XMLElement *tableProperty = element->FirstChildElement();
        -:  854://                while (tableProperty != nullptr) {
        -:  855://                    if (!strcmp(tableProperty->Value(), "w:tblInd")) {
        -:  856://                        if (tableProperty->FirstAttribute() != nullptr) {
        -:  857://                            auto tblInd = tableProperty->Attribute("w:w");
        -:  858://                            settings.settings.ind = atoi(tblInd);
        -:  859://                        }
        -:  860://                    } else if (!strcmp(tableProperty->Value(), "w:tblpPr")) {
        -:  861://
        -:  862://                    }
        -:  863://                    tableProperty = tableProperty->NextSiblingElement();
        -:  864://                }
        -:  865://            } else
       72:  866:            if (!strcmp(element->Value(), "w:tblGrid")) {
       72:  866-block  0
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
       72:  866-block  1
branch  3 taken 9 (fallthrough)
branch  4 taken 63
        9:  867:                XMLElement *gridCol = element->FirstChildElement();
        9:  867-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  867-block  1
       53:  868:                while (gridCol != nullptr) {
       53:  868-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 9
       44:  869:                    settings.tblGrids.emplace_back(std::stoi(gridCol->Attribute("w:w")));
       44:  869-block  0
call    0 returned 44
call    1 returned 44
branch  2 taken 44 (fallthrough)
branch  3 taken 0 (throw)
       44:  869-block  1
call    4 returned 44
branch  5 taken 44 (fallthrough)
branch  6 taken 0 (throw)
       44:  869-block  2
call    7 returned 44
branch  8 taken 44 (fallthrough)
branch  9 taken 0 (throw)
       44:  869-block  3
call   10 returned 44
branch 11 taken 44 (fallthrough)
branch 12 taken 0 (throw)
       44:  869-block  4
call   13 returned 44
call   14 returned 44
    $$$$$:  869-block  5
    $$$$$:  869-block  6
call   15 never executed
    $$$$$:  869-block  7
    $$$$$:  869-block  8
call   16 never executed
    $$$$$:  869-block  9
       44:  870:                    gridCol = gridCol->NextSiblingElement();
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
       44:  870-block  0
        -:  871:                }
        9:  872:                settings.columnAmount = settings.tblGrids.size();
        9:  872-block  0
call    0 returned 9
       63:  873:            } else if (!strcmp(element->Value(), "w:tr")) {//table row
       63:  873-block  0
call    0 returned 63
branch  1 taken 63 (fallthrough)
branch  2 taken 0 (throw)
       63:  873-block  1
branch  3 taken 54 (fallthrough)
branch  4 taken 9
       54:  874:                XMLElement *rowElement = element->FirstChildElement();
       54:  874-block  0
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
       54:  875:                settings.grid.emplace_back();
       54:  875-block  0
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
      403:  876:                while (rowElement != nullptr) {
      403:  876-block  0
branch  0 taken 349 (fallthrough)
branch  1 taken 54
      349:  877:                    if (!strcmp(rowElement->Value(), "w:tc")) {//Specifies a table cell
      349:  877-block  0
call    0 returned 349
branch  1 taken 349 (fallthrough)
branch  2 taken 0 (throw)
      349:  877-block  1
branch  3 taken 310 (fallthrough)
branch  4 taken 39
      310:  878:                        XMLElement *tcElement = rowElement->FirstChildElement();
      310:  878-block  0
call    0 returned 310
branch  1 taken 310 (fallthrough)
branch  2 taken 0 (throw)
      310:  878-block  1
      934:  879:                        while (tcElement != nullptr) {
      934:  879-block  0
branch  0 taken 624 (fallthrough)
branch  1 taken 310
      624:  880:                            if (!strcmp(tcElement->Value(), "w:p")) {//
      624:  880-block  0
call    0 returned 624
branch  1 taken 624 (fallthrough)
branch  2 taken 0 (throw)
      624:  880-block  1
branch  3 taken 313 (fallthrough)
branch  4 taken 311
      626:  881:                                paragraph tmpPar;
      313:  881-block  0
call    0 returned 313
      313:  881-block  1
call    1 returned 313
    $$$$$:  881-block  2
call    2 never executed
      313:  882:                                parseParagraph(tcElement, tmpPar);
call    0 returned 313
branch  1 taken 313 (fallthrough)
branch  2 taken 0 (throw)
      313:  883:                                settings.grid[line].back().text += tmpPar.body.back();
      313:  883-block  0
call    0 returned 313
call    1 returned 313
call    2 returned 313
call    3 returned 313
branch  4 taken 313 (fallthrough)
branch  5 taken 0 (throw)
        -:  884:                                //getTableCellParagraph(tcElement, paragraphParser); //TODO
      311:  885:                            } else if (!strcmp(tcElement->Value(), "w:tbl")) {//
      311:  885-block  0
call    0 returned 311
branch  1 taken 311 (fallthrough)
branch  2 taken 0 (throw)
      311:  885-block  1
branch  3 taken 310 (fallthrough)
branch  4 taken 1
        -:  886:                                // for the table in table...
      310:  887:                            } else if (!strcmp(tcElement->Value(), "w:tcPr")) {//Specifies a table cell
      310:  887-block  0
call    0 returned 310
branch  1 taken 310 (fallthrough)
branch  2 taken 0 (throw)
      310:  887-block  1
branch  3 taken 310 (fallthrough)
branch  4 taken 0
      310:  888:                                XMLElement *gridCol = tcElement->FirstChildElement();
      310:  888-block  0
call    0 returned 310
branch  1 taken 310 (fallthrough)
branch  2 taken 0 (throw)
      310:  889:                                size_t gridSpan = 1;
      310:  890:                                cell tmpCell;
      310:  890-block  0
call    0 returned 310
    $$$$$:  890-block  1
call    1 never executed
      848:  891:                                while (gridCol != nullptr) {
      848:  891-block  0
branch  0 taken 538 (fallthrough)
branch  1 taken 310
      538:  892:                                    if (!strcmp(gridCol->Value(), "w:tcW")) {
      538:  892-block  0
call    0 returned 538
branch  1 taken 538 (fallthrough)
branch  2 taken 0 (throw)
      538:  892-block  1
branch  3 taken 310 (fallthrough)
branch  4 taken 228
      310:  893:                                        auto size = gridCol->Attribute("w:w");
      310:  893-block  0
call    0 returned 310
branch  1 taken 310 (fallthrough)
branch  2 taken 0 (throw)
      310:  894:                                        if (size != nullptr) {
      310:  894-block  0
branch  0 taken 310 (fallthrough)
branch  1 taken 0
      310:  895:                                            tmpCell.width = strtol(size, nullptr, 10) / TWIP_TO_CHARACTER;
      310:  895-block  0
call    0 returned 310
        -:  896:                                        }
      228:  897:                                    } else if (!strcmp(gridCol->Value(), "w:gridSpan")) {
      228:  897-block  0
call    0 returned 228
branch  1 taken 228 (fallthrough)
branch  2 taken 0 (throw)
      228:  897-block  1
branch  3 taken 13 (fallthrough)
branch  4 taken 215
       13:  898:                                        gridSpan = strtol(gridCol->Attribute("w:val"), nullptr, 10);
       13:  898-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:  898-block  1
call    3 returned 13
        -:  899:                                    }
      538:  900:                                    gridCol = gridCol->NextSiblingElement();
      538:  900-block  0
call    0 returned 538
branch  1 taken 538 (fallthrough)
branch  2 taken 0 (throw)
      538:  900-block  1
        -:  901:                                }
      310:  902:                                tmpCell.gridSpan = gridSpan;
      310:  903:                                settings.grid[line].push_back(tmpCell);
      310:  903-block  0
call    0 returned 310
call    1 returned 310
branch  2 taken 310 (fallthrough)
branch  3 taken 0 (throw)
      310:  904:                                free(gridCol);
      310:  904-block  0
call    0 returned 310
        -:  905:                            }
      624:  906:                            tcElement = tcElement->NextSiblingElement();
      624:  906-block  0
call    0 returned 624
branch  1 taken 624 (fallthrough)
branch  2 taken 0 (throw)
      624:  906-block  1
        -:  907:                        }
      310:  908:                        currentColumn += settings.grid[line].back().gridSpan;
      310:  908-block  0
call    0 returned 310
call    1 returned 310
        -:  909:                    }
      349:  910:                    rowElement = rowElement->NextSiblingElement();
      349:  910-block  0
call    0 returned 349
branch  1 taken 349 (fallthrough)
branch  2 taken 0 (throw)
      349:  910-block  1
        -:  911:                }
       54:  912:                currentColumn = 0;
       54:  913:                line += 1;
       54:  913-block  0
        -:  914:            }
       72:  915:            element = element->NextSiblingElement();
       72:  915-block  0
call    0 returned 72
branch  1 taken 72 (fallthrough)
branch  2 taken 0 (throw)
       72:  915-block  1
        -:  916:        }
        -:  917:
        9:  918:        line = 0;
        9:  919:        size_t tableWidth = std::accumulate(settings.grid[line].begin(), settings.grid[line].end(), 0,
        9:  919-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
call    4 returned 9
function _ZZN9docxtotxt14DocumentLoader10parseTableEPN8tinyxml210XMLElementERNS_9paragraphEbENKUlmRKNS_4cellEE_clEmS8_ called 31 returned 100% blocks executed 100%
       31:  920:                                            [](size_t tableWidth, const cell &tmpCell) {
       31:  921:                                                return tableWidth + tmpCell.width;
       31:  921-block  0
        9:  922:                                            });
        9:  923:        size_t minColumn = settings.columnAmount;
       63:  924:        for (auto &i: settings.grid) {
call    0 returned 9
call    1 returned 9
       63:  924-block  0
call    2 returned 63
branch  3 taken 54 (fallthrough)
branch  4 taken 9
       54:  924-block  1
call    5 returned 54
       54:  925:            minColumn = min(minColumn, i.size());
call    0 returned 54
call    1 returned 54
call    2 returned 54
        -:  926:        }
        9:  927:        auto tableSize = tableWidth;
        9:  928:        tableSize += (minColumn + 1); //column size + amount of columns
        9:  929:        auto mediumLine = tableSize - 2;
        9:  930:        if (raw) {
        9:  930-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
       12:  931:            std::vector<size_t> columnSize(settings.columnAmount, 0);
        6:  931-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  931-block  1
call    4 returned 6
        6:  931-block  2
call    5 returned 6
    $$$$$:  931-block  3
    $$$$$:  931-block  4
    $$$$$:  931-block  5
call    6 never executed
       45:  932:            for (auto &row: settings.grid) {
call    0 returned 6
call    1 returned 6
       45:  932-block  0
call    2 returned 45
branch  3 taken 39 (fallthrough)
branch  4 taken 6
       39:  932-block  1
call    5 returned 39
       39:  932-block  2
call    6 returned 39
      288:  933:                for (int cell = 0; cell < row.size(); cell++) {
      288:  933-block  0
call    0 returned 288
branch  1 taken 249 (fallthrough)
branch  2 taken 39
      249:  934:                    columnSize[cell] = std::max(columnSize[cell], row[cell].text.size());
      249:  934-block  0
call    0 returned 249
call    1 returned 249
call    2 returned 249
call    3 returned 249
call    4 returned 249
        -:  935:                }
        -:  936:            }
       45:  937:            for (auto &row: settings.grid) {
        6:  937-block  0
call    0 returned 6
call    1 returned 6
       45:  937-block  1
call    2 returned 45
branch  3 taken 39 (fallthrough)
branch  4 taken 6
       39:  937-block  2
call    5 returned 39
       39:  937-block  3
call    6 returned 39
       39:  938:                par.body.emplace_back();
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0 (throw)
      288:  939:                for (int cell = 0; cell < row.size(); cell++) {
       39:  939-block  0
      288:  939-block  1
call    0 returned 288
branch  1 taken 249 (fallthrough)
branch  2 taken 39
      249:  940:                    par.body.back().append(row[cell].text).append(
      249:  940-block  0
call    0 returned 249
call    1 returned 249
call    2 returned 249
branch  3 taken 249 (fallthrough)
branch  4 taken 0 (throw)
      249:  941:                            std::wstring(columnSize[cell] - row[cell].text.size() + 1, L' '));
      249:  941-block  0
call    0 returned 249
call    1 returned 249
call    2 returned 249
call    3 returned 249
call    4 returned 249
branch  5 taken 249 (fallthrough)
branch  6 taken 0 (throw)
      249:  941-block  1
call    7 returned 249
branch  8 taken 249 (fallthrough)
branch  9 taken 0 (throw)
      249:  941-block  2
call   10 returned 249
call   11 returned 249
    $$$$$:  941-block  3
call   12 never executed
    $$$$$:  941-block  4
    $$$$$:  941-block  5
call   13 never executed
    $$$$$:  941-block  6
        -:  942:                }
        -:  943:            }
        -:  944:        } else {
        3:  945:            par.body.emplace_back(std::wstring(1, L'+').append(mediumLine, L'—').append(1, L'+'));
        3:  945-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  945-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  945-block  2
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3:  945-block  3
call   10 returned 3
branch 11 taken 3 (fallthrough)
branch 12 taken 0 (throw)
        3:  945-block  4
call   13 returned 3
call   14 returned 3
    $$$$$:  945-block  5
call   15 never executed
    $$$$$:  945-block  6
    $$$$$:  945-block  7
call   16 never executed
    $$$$$:  945-block  8
       22:  946:            while (line < settings.grid.size()) {
       22:  946-block  0
call    0 returned 22
branch  1 taken 19 (fallthrough)
branch  2 taken 3
       19:  946-block  1
       19:  947:                bool lineDone = true;
       19:  948:                currentColumn = 0;
       19:  949:                par.body.emplace_back(L"|");
       19:  949-block  0
call    0 returned 19
branch  1 taken 19 (fallthrough)
branch  2 taken 0 (throw)
      102:  950:                while (currentColumn < settings.grid[line].size()) {
      102:  950-block  0
call    0 returned 102
call    1 returned 102
branch  2 taken 83 (fallthrough)
branch  3 taken 19
       83:  951:                    auto charInCell = settings.grid[line][currentColumn].width;
       83:  951-block  0
call    0 returned 83
call    1 returned 83
       83:  952:                    if (!settings.grid[line][currentColumn].text.empty()) {
call    0 returned 83
call    1 returned 83
call    2 returned 83
branch  3 taken 65 (fallthrough)
branch  4 taken 18
      130:  953:                        auto text = settings.grid[line][currentColumn].text;
       65:  953-block  0
call    0 returned 65
call    1 returned 65
call    2 returned 65
branch  3 taken 65 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 65
    $$$$$:  953-block  1
call    6 never executed
      130:  954:                        std::wstring resultText;
       65:  954-block  0
call    0 returned 65
       65:  954-block  1
call    1 returned 65
    $$$$$:  954-block  2
call    2 never executed
       65:  955:                        auto indexLastElement = text.find_last_of(L' ', charInCell);
call    0 returned 65
       65:  956:                        if (charInCell < text.size()) {
call    0 returned 65
branch  1 taken 4 (fallthrough)
branch  2 taken 61
        4:  957:                            lineDone = false;
        4:  958:                            if (indexLastElement == string::npos) {
        4:  958-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  959:                                resultText = text.substr(0, charInCell);
    %%%%%:  959-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  959-block  1
call    3 never executed
call    4 never executed
        -:  960:                            } else {
        4:  961:                                resultText = text.substr(0, indexLastElement);
        4:  961-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  961-block  1
call    3 returned 4
call    4 returned 4
        -:  962:                            }
        4:  963:                            par.body.back().append(resultText);
        4:  963-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  964:                            par.body.back().append(indexLastElement == string::npos ? 0 : charInCell - indexLastElement,
        4:  964-block  0
call    0 returned 4
       4*:  965:                                                   L' ');
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  965-block  0
    %%%%%:  965-block  1
        4:  965-block  2
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        -:  966:                        } else {
       61:  967:                            resultText = text;
       61:  967-block  0
call    0 returned 61
branch  1 taken 61 (fallthrough)
branch  2 taken 0 (throw)
       61:  968:                            par.body.back().append(resultText);
       61:  968-block  0
call    0 returned 61
call    1 returned 61
branch  2 taken 61 (fallthrough)
branch  3 taken 0 (throw)
       61:  969:                            par.body.back().append(charInCell - text.size(), L' ');
       61:  969-block  0
call    0 returned 61
call    1 returned 61
call    2 returned 61
branch  3 taken 61 (fallthrough)
branch  4 taken 0 (throw)
        -:  970:                        }
       65:  971:                        settings.grid[line][currentColumn].text.erase(0, resultText.size() + 1);
       65:  971-block  0
call    0 returned 65
call    1 returned 65
call    2 returned 65
call    3 returned 65
branch  4 taken 65 (fallthrough)
branch  5 taken 0 (throw)
       65:  972:                        par.body.back().append(1, L'|');
       65:  972-block  0
call    0 returned 65
call    1 returned 65
branch  2 taken 65 (fallthrough)
branch  3 taken 0 (throw)
        -:  973:                    } else {
      18*:  974:                        par.body.back().append(charInCell == 1 ? 0 : charInCell, L' ').append(1, L'|');
       18:  974-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0
       18:  974-block  1
    %%%%%:  974-block  2
       18:  974-block  3
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0 (throw)
       18:  974-block  4
call    6 returned 18
branch  7 taken 18 (fallthrough)
branch  8 taken 0 (throw)
        -:  975:                    }
       83:  976:                    currentColumn++;
       83:  976-block  0
        -:  977:                }
       19:  978:                if (lineDone) {
       19:  978-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 4
       15:  979:                    line++;
       15:  980:                    par.body.emplace_back(std::wstring(1, L'+').append(mediumLine, L'—').append(1, L'+'));
       15:  980-block  0
call    0 returned 15
call    1 returned 15
branch  2 taken 15 (fallthrough)
branch  3 taken 0 (throw)
       15:  980-block  1
call    4 returned 15
branch  5 taken 15 (fallthrough)
branch  6 taken 0 (throw)
       15:  980-block  2
call    7 returned 15
branch  8 taken 15 (fallthrough)
branch  9 taken 0 (throw)
       15:  980-block  3
call   10 returned 15
branch 11 taken 15 (fallthrough)
branch 12 taken 0 (throw)
       15:  980-block  4
call   13 returned 15
call   14 returned 15
    $$$$$:  980-block  5
call   15 never executed
    $$$$$:  980-block  6
    $$$$$:  980-block  7
call   16 never executed
    $$$$$:  980-block  8
        -:  981:                }
        -:  982:            }
        -:  983:        }
        9:  984:    }
        -:  985:
function _ZN9docxtotxt14DocumentLoader13addSdtContentEPN8tinyxml210XMLElementERSt6vectorINS_9paragraphESaIS5_EE called 4 returned 100% blocks executed 84%
        4:  986:    void DocumentLoader::addSdtContent(XMLElement *sdtContent, vector<paragraph> &body) {
        4:  987:        auto childElem = sdtContent->FirstChildElement();
        4:  987-block  0
call    0 returned 4
       28:  988:        while (childElem != nullptr) {
       28:  988-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 4
       24:  989:            if (!strcmp(childElem->Value(), "w:p")) {
       24:  989-block  0
call    0 returned 24
branch  1 taken 22 (fallthrough)
branch  2 taken 2
       44:  990:                paragraph par;
       22:  990-block  0
call    0 returned 22
       22:  990-block  1
call    1 returned 22
    $$$$$:  990-block  2
call    2 never executed
       22:  991:                par.type = paragraphType::par;
       22:  992:                parseParagraph(childElem, par);
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  993:                body.emplace_back(par);
       22:  993-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        2:  994:            } else if (!strcmp(childElem->Value(), "w:tbl")) {
        2:  994-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        2:  995:                paragraph par;
        1:  995-block  0
call    0 returned 1
        1:  995-block  1
call    1 returned 1
    $$$$$:  995-block  2
call    2 never executed
        1:  996:                par.type = paragraphType::table;
        1:  997:                parseTable(childElem, par, true);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  998:                body.emplace_back(par);
        1:  998-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  999:            } else if (!strcmp(childElem->Value(), "w:sdt")) {
        1:  999-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 1000:                auto sdt = childElem->FirstChildElement("w:sdtContent");
        1: 1000-block  0
call    0 returned 1
        1: 1001:                if (sdt != nullptr) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 1002:                    addSdtContent(sdt, body);
        1: 1002-block  0
call    0 returned 1
        -: 1003:                }
        -: 1004:            }
       24: 1005:            childElem = childElem->NextSiblingElement();
       24: 1005-block  0
call    0 returned 24
        -: 1006:        }
        4: 1007:    }
        4: 1007-block  0
        -: 1008:
function _ZN9docxtotxt14DocumentLoader13parseDocNotesEPN8tinyxml211XMLDocumentE called 6 returned 100% blocks executed 80%
        6: 1009:    void DocumentLoader::parseDocNotes(XMLDocument *doc) {
        6: 1010:        note object;
        6: 1010-block  0
call    0 returned 6
    $$$$$: 1010-block  1
call    1 never executed
        6: 1011:        object.text = L"";
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1012:        XMLElement *childElem = doc->FirstChildElement();
        6: 1012-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1013:        if (childElem->FirstChildElement("w:footnote") != nullptr) {
        6: 1013-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1013-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        3: 1014:            childElem = childElem->FirstChildElement("w:footnote");
        3: 1014-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1015:            object.type = footnote;
        3: 1015-block  0
        3: 1016:        } else if (childElem->FirstChildElement("w:endnote") != nullptr) {
        3: 1016-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1016-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        3: 1017:            childElem = childElem->FirstChildElement("w:endnote");
        3: 1017-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1018:            object.type = endnote;
        3: 1018-block  0
        -: 1019:        } else
    #####: 1020:            return;
    %%%%%: 1020-block  0
       20: 1021:        while (childElem != nullptr) {
       20: 1021-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 6
       14: 1022:            auto id = childElem->Attribute("w:id");
       14: 1022-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14: 1023:            if (id != nullptr)
       14: 1023-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14: 1024:                object.id = strtol(id, nullptr, 10);
       14: 1024-block  0
call    0 returned 14
       14: 1025:            auto p = childElem->FirstChildElement("w:p");
       14: 1025-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14: 1025-block  1
       28: 1026:            while (p != nullptr) {
       28: 1026-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 14
       14: 1026-block  1
       14: 1027:                auto r = p->FirstChildElement("w:r");
       14: 1027-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14: 1027-block  1
       30: 1028:                while (r != nullptr) {
       30: 1028-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 14
       16: 1029:                    auto t = r->FirstChildElement("w:t");
       16: 1029-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16: 1030:                    if (t != nullptr && t->GetText() != nullptr) {
       16: 1030-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 14
        2: 1030-block  1
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2: 1030-block  2
branch  5 taken 2 (fallthrough)
branch  6 taken 0
        2: 1030-block  3
       14: 1030-block  4
       16: 1030-block  5
branch  7 taken 2 (fallthrough)
branch  8 taken 14
        2: 1031:                        object.text += writer.convertString(t->GetText());
        2: 1031-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 1031-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2: 1031-block  2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2: 1031-block  3
call   10 returned 2
branch 11 taken 2 (fallthrough)
branch 12 taken 0 (throw)
        2: 1031-block  4
call   13 returned 2
call   14 returned 2
call   15 returned 2
    $$$$$: 1031-block  5
call   16 never executed
    $$$$$: 1031-block  6
    $$$$$: 1031-block  7
call   17 never executed
    $$$$$: 1031-block  8
    $$$$$: 1031-block  9
call   18 never executed
    $$$$$: 1031-block 10
        -: 1032:                    }
       16: 1033:                    r = r->NextSiblingElement();
       16: 1033-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16: 1033-block  1
        -: 1034:                }
       14: 1035:                p = p->NextSiblingElement();
       14: 1035-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14: 1036:                if (!object.text.empty())
       14: 1036-block  0
call    0 returned 14
branch  1 taken 2 (fallthrough)
branch  2 taken 12
        2: 1037:                    docInfo.notes.emplace_back(object);
        2: 1037-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 1038:            }
       14: 1039:            childElem = childElem->NextSiblingElement();
       14: 1039-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14: 1039-block  1
        -: 1040:        }
        -: 1041:    }
        -: 1042:
        -: 1043:
        -: 1044:}
        -: 1045:
        -: 1046:
        -: 1047:
        -: 1048:
        -: 1049:
        -: 1050:
        -: 1051:
        -: 1052:
