        -:    0:Source:/home/borzor/CLionProjects/docxtotxt/mainDoc/source/MainDocParser.cpp
        -:    0:Graph:/home/borzor/CLionProjects/docxtotxt/cmake-build-debug-coverage/CMakeFiles/docxtotxt.dir/mainDoc/source/MainDocParser.cpp.gcno
        -:    0:Data:/home/borzor/CLionProjects/docxtotxt/cmake-build-debug-coverage/CMakeFiles/docxtotxt.dir/mainDoc/source/MainDocParser.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by boris on 2/9/22.
        -:    3://
        -:    4:
        -:    5:#include <string>
        -:    6:#include <fstream>
        -:    7:#include "../headers/MainDocParser.h"
        -:    8:#include "../headers/XlsParser.h"
        -:    9:#include "../headers/DocumentLoader.h"
        -:   10:#include "../headers/PptParser.h"
        -:   11:#include "../headers/DocParser.h"
        -:   12:
        -:   13:namespace docxtotxt {
function _ZN9docxtotxt13MainDocParser9parseFileEv called 7 returned 100% blocks executed 73%
        7:   14:    void MainDocParser::parseFile() {
       14:   15:        docxtotxt::BufferWriter writer(options);
        7:   15-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   15-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 7
    $$$$$:   15-block  2
    $$$$$:   15-block  3
call    7 never executed
       14:   16:        DocumentLoader documentLoader(options, writer);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   16-block  0
call    3 returned 7
    $$$$$:   16-block  1
call    4 never executed
        7:   17:        documentLoader.loadData();
        7:   17-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   18:        if ((options.flags >> 4) & 1) {
        7:   18-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   19:            writer.insertMetadata();
        7:   19-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:   20:        }
        7:   21:        switch (options.docType) {
        7:   21-block  0
branch  0 taken 2
branch  1 taken 3
branch  2 taken 2
branch  3 taken 0
        2:   22:            case pptx: {
        4:   23:                auto pptInfo = documentLoader.getPptxData();
        2:   23-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
    $$$$$:   23-block  1
call    4 never executed
        4:   24:                PptParser pptParser(pptInfo, options, writer);
        2:   24-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   24-block  1
call    3 returned 2
    $$$$$:   24-block  2
call    4 never executed
        2:   25:                pptParser.parseFile();
        2:   25-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   26:                if ((options.flags >> 1) & 1) {
        2:   26-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
       17:   27:                    for (auto &slide: pptInfo.slides)
        2:   27-block  0
call    0 returned 2
call    1 returned 2
       17:   27-block  1
call    2 returned 17
branch  3 taken 15 (fallthrough)
branch  4 taken 2
       15:   27-block  2
call    5 returned 15
       15:   27-block  3
call    6 returned 15
       15:   28:                        saveImages(slide.relations.imageRelationship);
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
        -:   29:                }
        2:   30:                writer.writeResult();
        2:   30-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   31:                break;
        2:   31-block  0
        -:   32:            }
        3:   33:            case docx: {
        6:   34:                auto docInfo = documentLoader.getDocxData();
        3:   34-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   34-block  1
call    3 returned 3
    $$$$$:   34-block  2
call    4 never executed
        3:   35:                DocParser docParser(docInfo, options, writer);
        3:   35-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   36:                docParser.parseFile();
        3:   36-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   37:                if ((options.flags >> 1) & 1) {
        3:   37-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   38:                    saveImages(docInfo.relations.imageRelationship);
        3:   38-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   39:                }
        3:   40:                writer.writeResult();
        3:   40-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   41:                if ((options.flags >> 2) & 1) {
        3:   41-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   42:                    insertHyperlinks(docInfo.relations.hyperlinkRelationship);
        3:   42-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   42-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   42-block  2
call    6 returned 3
    $$$$$:   42-block  3
call    7 never executed
    $$$$$:   42-block  4
        -:   43:                }
        3:   44:                break;
        3:   44-block  0
        -:   45:            }
        2:   46:            case xlsx: {
        4:   47:                auto xlsInfo = documentLoader.getXlsxData();
        2:   47-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   47-block  1
call    3 returned 2
    $$$$$:   47-block  2
call    4 never executed
        2:   48:                XlsParser xlsParser(xlsInfo, options, writer);
        2:   48-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   49:                xlsParser.parseFile();
        2:   49-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   50:                if ((options.flags >> 1) & 1) {
        2:   50-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        4:   51:                    for (auto &draw: xlsInfo.draws)
        2:   51-block  0
call    0 returned 2
call    1 returned 2
        4:   51-block  1
call    2 returned 4
branch  3 taken 2 (fallthrough)
branch  4 taken 2
        2:   51-block  2
call    5 returned 2
        2:   51-block  3
call    6 returned 2
        2:   52:                        saveImages(draw.relations.imageRelationship);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:                }
        2:   54:                writer.writeResult();
        2:   54-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   55:                break;
        2:   55-block  0
        -:   56:            }
        -:   57:        }
        7:   58:        zip_close(options.input);
        7:   58-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   59:        delete (options.output);
        7:   59-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   59-block  1
call    2 returned 7
        7:   60:    }
        -:   61:
function _ZN9docxtotxt13MainDocParserC2ERNS_9options_tE called 7 returned 100% blocks executed 100%
        7:   62:    MainDocParser::MainDocParser(options_t &options) :
        7:   63:            options(options) {
        7:   63-block  0
call    0 returned 7
        -:   64:
        7:   65:    }
        -:   66:
function _ZN9docxtotxt13MainDocParser16insertHyperlinksESt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_St4lessIS7_ESaISt4pairIKS7_S7_EEE called 3 returned 100% blocks executed 66%
        3:   67:    void MainDocParser::insertHyperlinks(std::map<std::string, std::string> hyperlinkRelationship) {
        3:   68:        *options.output << L"Document hyperlinks:" <<'\n';
        3:   68-block  0
call    0 returned 3
call    1 returned 3
        4:   69:        for (const auto &kv: hyperlinkRelationship) {
call    0 returned 3
call    1 returned 3
        4:   69-block  0
call    2 returned 4
branch  3 taken 1 (fallthrough)
branch  4 taken 3
        1:   69-block  1
call    5 returned 1
call    6 returned 1
        1:   70:            auto number = distance(hyperlinkRelationship.begin(), hyperlinkRelationship.find(kv.first));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   70-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        2:   71:            auto result = wstring(L"{h").append(
        1:   71-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
    $$$$$:   71-block  1
    $$$$$:   71-block  2
        3:   72:                    to_wstring(number).append(L"} -  ").append(convertor.from_bytes(kv.second)));
        1:   72-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   72-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   72-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   72-block  4
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   72-block  5
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
call   19 returned 1
        1:   72-block  6
call   20 returned 1
    $$$$$:   72-block  7
    $$$$$:   72-block  8
    $$$$$:   72-block  9
call   21 never executed
        1:   73:            *options.output << result << '\n';
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   73-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   74:            options.output->flush();
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   75:        }
        3:   76:    }
        3:   76-block  0
        -:   77:
function _ZNK9docxtotxt13MainDocParser10saveImagesERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_St4lessIS7_ESaISt4pairIKS7_S7_EEE called 20 returned 100% blocks executed 34%
       20:   78:    void MainDocParser::saveImages(const std::map<std::string, std::string> &imageRelationship) const {
       20:   79:        struct zip_stat file_info{};
       20:   80:        zip_stat_init(&file_info);
       20:   80-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       62:   81:        for (const auto &kv: imageRelationship) {
       20:   81-block  0
call    0 returned 20
call    1 returned 20
       62:   81-block  1
call    2 returned 62
branch  3 taken 42 (fallthrough)
branch  4 taken 20
       42:   81-block  2
call    5 returned 42
      42*:   82:            if (zip_stat(options.input, kv.second.c_str(), ZIP_FL_NODIR, &file_info) == -1)throw runtime_error("Error: Cannot get info about " + kv.second + " file");
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
       42:   82-block  0
branch  4 taken 0 (fallthrough)
branch  5 taken 42
    %%%%%:   82-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   82-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   82-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   82-block  4
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$:   82-block  5
call   19 never executed
    $$$$$:   82-block  6
    $$$$$:   82-block  7
call   20 never executed
    $$$$$:   82-block  8
    $$$$$:   82-block  9
call   21 never executed
       42:   83:            char tmpImageBuffer[file_info.size];
       42:   84:            auto currentImage = zip_fopen(options.input, kv.second.c_str(), ZIP_FL_NODIR);
       42:   84-block  0
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
      42*:   85:            if (zip_fread(currentImage, &tmpImageBuffer, file_info.size) == -1)throw runtime_error("Error: Cannot read " + kv.second + " file");
       42:   85-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:   85-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 42
    %%%%%:   85-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   85-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   85-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:   85-block  5
call   15 never executed
call   16 never executed
call   17 never executed
    $$$$$:   85-block  6
call   18 never executed
    $$$$$:   85-block  7
    $$$$$:   85-block  8
call   19 never executed
    $$$$$:   85-block  9
    $$$$$:   85-block 10
call   20 never executed
       42:   86:            zip_fclose(currentImage);
       42:   86-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       84:   87:            if (!std::ofstream(string(options.pathToDraws) + "/" + kv.second).write(tmpImageBuffer,
       42:   87-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:   87-block  1
call    3 returned 42
branch  4 taken 42 (fallthrough)
branch  5 taken 0 (throw)
       42:   87-block  2
call    6 returned 42
branch  7 taken 42 (fallthrough)
branch  8 taken 0 (throw)
       42:   87-block  3
call    9 returned 42
branch 10 taken 42 (fallthrough)
branch 11 taken 0 (throw)
       42:   87-block  4
call   12 returned 42
call   13 returned 42
call   14 returned 42
call   15 returned 42
branch 16 taken 0 (fallthrough)
branch 17 taken 42
    $$$$$:   87-block  5
call   18 never executed
    $$$$$:   87-block  6
    $$$$$:   87-block  7
call   19 never executed
    $$$$$:   87-block  8
    $$$$$:   87-block  9
call   20 never executed
    $$$$$:   87-block 10
    $$$$$:   87-block 11
call   21 never executed
    $$$$$:   87-block 12
      42*:   88:                                                                                    (long) file_info.size))throw runtime_error("Error writing file" + kv.second);
       42:   88-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:   88-block  1
call    3 returned 42
branch  4 taken 42 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:   88-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   88-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   88-block  4
call   13 never executed
call   14 never executed
    $$$$$:   88-block  5
call   15 never executed
    $$$$$:   88-block  6
    $$$$$:   88-block  7
call   16 never executed
       42:   89:        }
       42:   89-block  0
call    0 returned 42
       20:   90:    }
       20:   90-block  0
        -:   91:
        -:   92:
        -:   93:
        -:   94:
        -:   95:}
        -:   96:
        -:   97:
