        -:    0:Source:/home/borzor/CLionProjects/docxtotxt/main.cpp
        -:    0:Graph:/home/borzor/CLionProjects/docxtotxt/cmake-build-debug-coverage/CMakeFiles/docxtotxt.dir/main.cpp.gcno
        -:    0:Data:/home/borzor/CLionProjects/docxtotxt/cmake-build-debug-coverage/CMakeFiles/docxtotxt.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "mainDoc/headers/MainDocParser.h"
        -:    2:#include <getopt.h>
        -:    3:#include <deque>
        -:    4:#include <sys/stat.h>
        -:    5:#include <chrono>
        -:    6:#include <iostream>
        -:    7:#include <fstream>
        -:    8:
        -:    9:#define OPTSTR "i:d:o:lmhnr"
        -:   10:using namespace std;
        -:   11:
function _Z12coverageTestN9docxtotxt9options_tE called 7 returned 100% blocks executed 72%
        7:   12:void coverageTest(docxtotxt::options_t options) {
        7:   13:    auto start = std::chrono::steady_clock::now();
        7:   13-block  0
call    0 returned 7
        7:   14:    docxtotxt::MainDocParser parser(options);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   14-block  0
call    3 never executed
        7:   15:    parser.parseFile();
        7:   15-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   16:    std::cout << "Elapsed(ms)="
        7:   16-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
       14:   17:              << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start).count()
        7:   17-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   17-block  1
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7:   17-block  2
call    7 returned 7
call    8 returned 7
branch  9 taken 7 (fallthrough)
branch 10 taken 0 (throw)
        7:   17-block  3
call   11 returned 7
    $$$$$:   17-block  4
    $$$$$:   17-block  5
    $$$$$:   17-block  6
        7:   18:              << std::endl;
        7:   18-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:   19:
        7:   20:}
        -:   21:
        -:   22:docxtotxt::options_t
function _Z14prepareOptionsPKcS0_S0_ called 7 returned 100% blocks executed 53%
        7:   23:prepareOptions(const char *fileName, const char *output = nullptr, const char *imageDir = nullptr) {
        7:   24:    docxtotxt::options_t options = {&std::wcout};
        7:   24-block  0
call    0 returned 7
        7:   25:    if (docxtotxt::ends_with(fileName, ".docx")) {
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   25-block  0
call    4 returned 7
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
        7:   25-block  1
call    8 returned 7
branch  9 taken 7 (fallthrough)
branch 10 taken 0 (throw)
        7:   25-block  2
call   11 returned 7
call   12 returned 7
call   13 returned 7
call   14 returned 7
branch 15 taken 3 (fallthrough)
branch 16 taken 4
    $$$$$:   25-block  3
call   17 never executed
    $$$$$:   25-block  4
    $$$$$:   25-block  5
call   18 never executed
    $$$$$:   25-block  6
    $$$$$:   25-block  7
call   19 never executed
    $$$$$:   25-block  8
    $$$$$:   25-block  9
call   20 never executed
    $$$$$:   25-block 10
        3:   26:        options.docType = docxtotxt::docx;
        3:   26-block  0
        4:   27:    } else if (docxtotxt::ends_with(fileName, ".pptx")) {
        4:   27-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   27-block  1
call    4 returned 4
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
        4:   27-block  2
call    8 returned 4
branch  9 taken 4 (fallthrough)
branch 10 taken 0 (throw)
        4:   27-block  3
call   11 returned 4
call   12 returned 4
call   13 returned 4
call   14 returned 4
branch 15 taken 2 (fallthrough)
branch 16 taken 2
    $$$$$:   27-block  4
call   17 never executed
    $$$$$:   27-block  5
    $$$$$:   27-block  6
call   18 never executed
    $$$$$:   27-block  7
    $$$$$:   27-block  8
call   19 never executed
    $$$$$:   27-block  9
    $$$$$:   27-block 10
call   20 never executed
    $$$$$:   27-block 11
        2:   28:        options.docType = docxtotxt::pptx;
        2:   28-block  0
        2:   29:    } else if (docxtotxt::ends_with(fileName, ".xlsx")) {
        2:   29-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   29-block  1
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   29-block  2
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
        2:   29-block  3
call   11 returned 2
call   12 returned 2
call   13 returned 2
call   14 returned 2
branch 15 taken 2 (fallthrough)
branch 16 taken 0
    $$$$$:   29-block  4
call   17 never executed
    $$$$$:   29-block  5
    $$$$$:   29-block  6
call   18 never executed
    $$$$$:   29-block  7
    $$$$$:   29-block  8
call   19 never executed
    $$$$$:   29-block  9
    $$$$$:   29-block 10
call   20 never executed
    $$$$$:   29-block 11
        2:   30:        options.docType = docxtotxt::xlsx;
        2:   30-block  0
        -:   31:    }
        7:   32:    options.filePath = fileName;
        7:   33:    options.flags |= 1 << 0;
        7:   34:    options.flags |= 1 << 2;
        7:   35:    options.flags |= 1 << 3;
        7:   36:    options.flags |= 1 << 4;
        7:   37:    options.flags |= 1 << 5;
        7:   38:    if (output != nullptr) {
        7:   38-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   39:        std::locale loco(std::locale(), new std::codecvt_utf8<wchar_t>);
        7:   39-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   39-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:   39-block  2
call    6 returned 7
call    7 returned 7
branch  8 taken 7 (fallthrough)
branch  9 taken 0 (throw)
    $$$$$:   39-block  3
call   10 never executed
    $$$$$:   39-block  4
    $$$$$:   39-block  5
call   11 never executed
        7:   40:        options.output = new std::wofstream(output);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   40-block  0
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   40-block  1
call    6 never executed
        7:   41:        options.output->imbue(loco);
        7:   41-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   41-block  1
call    3 returned 7
call    4 returned 7
        -:   42:    }
        7:   43:    if (imageDir != nullptr) {
        7:   43-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   44:        options.flags |= 1 << 1;
        7:   45:        mkdir(imageDir, 0777);
        7:   45-block  0
call    0 returned 7
        7:   46:        options.pathToDraws = std::string(imageDir);
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   46-block  0
call    4 returned 7
call    5 returned 7
call    6 returned 7
    $$$$$:   46-block  1
call    7 never executed
    $$$$$:   46-block  2
        -:   47:    }
        7:   48:    return options;
        7:   48-block  0
        7:   48-block  1
        -:   49:}
        -:   50:
function _Z21parseFullPresentationv called 1 returned 100% blocks executed 58%
        1:   51:void parseFullPresentation() {
        -:   52:    auto options = prepareOptions("/home/borzor/Documents/pptx/presentation_2.pptx",
        -:   53:                                  "/home/borzor/Documents/pptx/presentation_2/pptx.txt",
        1:   54:                                  "/home/borzor/Documents/pptx/presentation_2");
        1:   54-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   54-block  1
call    3 never executed
        1:   55:    coverageTest(options);
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   55-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   55-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   55-block  3
call    8 never executed
    $$$$$:   55-block  4
        1:   56:}
        -:   57:
function _Z22parseFullPresentation2v called 1 returned 100% blocks executed 58%
        1:   58:void parseFullPresentation2() {
        -:   59:    auto options = prepareOptions("/home/borzor/Documents/pptx/presentation_1.pptx",
        -:   60:                                  "/home/borzor/Documents/pptx/presentation_1/pptx.txt",
        1:   61:                                  "/home/borzor/Documents/pptx/presentation_1");
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   61-block  1
call    3 never executed
        1:   62:    coverageTest(options);
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   62-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   62-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   62-block  3
call    8 never executed
    $$$$$:   62-block  4
        1:   63:}
        -:   64:
function _Z13parseFullDocxv called 1 returned 100% blocks executed 58%
        1:   65:void parseFullDocx() {
        -:   66:    auto options = prepareOptions("/home/borzor/Documents/docx/docx_1.docx",
        1:   67:                                  "/home/borzor/Documents/docx/docx_1/docx.txt", "/home/borzor/Documents/docx/docx_1");
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   67-block  1
call    3 never executed
        1:   68:    options.flags ^= 1UL << 5;
        1:   69:    coverageTest(options);
        1:   69-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   69-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   69-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   69-block  3
call    8 never executed
    $$$$$:   69-block  4
        1:   70:}
        -:   71:
function _Z14parseFullDocx2v called 1 returned 100% blocks executed 58%
        1:   72:void parseFullDocx2() {
        -:   73:    auto options = prepareOptions("/home/borzor/Documents/docx/docx_2.docx",
        1:   74:                                  "/home/borzor/Documents/docx/docx_2/docx.txt", "/home/borzor/Documents/docx/docx_2");
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   74-block  1
call    3 never executed
        1:   75:    coverageTest(options);
        1:   75-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   75-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   75-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   75-block  3
call    8 never executed
    $$$$$:   75-block  4
        1:   76:}
        -:   77:
function _Z14parseFullDocx3v called 1 returned 100% blocks executed 58%
        1:   78:void parseFullDocx3() {
        -:   79:    auto options = prepareOptions("/home/borzor/Documents/docx/docx_3.docx",
        1:   80:                                  "/home/borzor/Documents/docx/docx_3/docx.txt", "/home/borzor/Documents/docx/docx_3");
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   80-block  1
call    3 never executed
        1:   81:    options.flags ^= 1UL << 5;
        1:   82:    coverageTest(options);
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   82-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   82-block  3
call    8 never executed
    $$$$$:   82-block  4
        1:   83:}
        -:   84:
function _Z13parseFullXlsxv called 1 returned 100% blocks executed 58%
        1:   85:void parseFullXlsx() {
        -:   86:    auto options = prepareOptions("/home/borzor/Documents/xlsx/excel_4.xlsx",
        -:   87:                                  "/home/borzor/Documents/xlsx/excel_4/excel.txt",
        1:   88:                                  "/home/borzor/Documents/xlsx/excel_4");
        1:   88-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   88-block  1
call    3 never executed
        1:   89:    coverageTest(options);
        1:   89-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   89-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   89-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   89-block  3
call    8 never executed
    $$$$$:   89-block  4
        1:   90:}
        -:   91:
function _Z14parseFullXlsx2v called 1 returned 100% blocks executed 58%
        1:   92:void parseFullXlsx2() {
        -:   93:    auto options = prepareOptions("/home/borzor/Documents/xlsx/excel_1.xlsx",
        -:   94:                                  "/home/borzor/Documents/xlsx/excel_1/excel.txt",
        1:   95:                                  "/home/borzor/Documents/xlsx/excel_1");
        1:   95-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   95-block  1
call    3 never executed
        1:   96:    options.flags ^= 1UL << 5;
        1:   97:    coverageTest(options);
        1:   97-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   97-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   97-block  2
call    6 returned 1
call    7 returned 1
    $$$$$:   97-block  3
call    8 never executed
    $$$$$:   97-block  4
        1:   98:}
        -:   99:
        -:  100:
function main called 1 returned 100% blocks executed 100%
        1:  101:int main() {
        1:  102:    parseFullDocx();
        1:  102-block  0
call    0 returned 1
        1:  103:    parseFullDocx2();
call    0 returned 1
        1:  104:    parseFullDocx3();
call    0 returned 1
        1:  105:    parseFullPresentation();
call    0 returned 1
        1:  106:    parseFullPresentation2();
call    0 returned 1
        1:  107:    parseFullXlsx();
call    0 returned 1
        1:  108:    parseFullXlsx2();
call    0 returned 1
        1:  109:    return 0;
        -:  110:}
        -:  111://
        -:  112://int main(int argc, char *argv[]) {
        -:  113://    auto start = std::chrono::steady_clock::now();
        -:  114://    int opt;
        -:  115://    docxtotxt::options_t options = {&std::wcout};
        -:  116://    while ((opt = getopt(argc, argv, OPTSTR)) != EOF)
        -:  117://        switch (opt) {
        -:  118://            case 'i': {//input file
        -:  119://                auto fileName = std::string(optarg);
        -:  120://                if (docxtotxt::ends_with(fileName, ".docx")) {
        -:  121://                    options.docType = docxtotxt::docx;
        -:  122://                } else if (docxtotxt::ends_with(fileName, ".pptx")) {
        -:  123://                    options.docType = docxtotxt::pptx;
        -:  124://                } else if (docxtotxt::ends_with(fileName, ".xlsx")) {
        -:  125://                    options.docType = docxtotxt::xlsx;
        -:  126://                } else {
        -:  127://                    throw std::invalid_argument("No input file by parameter -i");
        -:  128://                }
        -:  129://                options.filePath = optarg;
        -:  130://                break;
        -:  131://            }
        -:  132://            case 'd': {//draws
        -:  133://                options.flags |= 1 << 1;
        -:  134://                mkdir(optarg, 0777);
        -:  135://                options.pathToDraws = std::string(optarg);
        -:  136://                break;
        -:  137://            }
        -:  138://            case 'o': {//output file
        -:  139://                std::locale loco(std::locale(), new std::codecvt_utf8<wchar_t>);
        -:  140://                options.flags |= 1 << 0;
        -:  141://                options.output = new std::wofstream(optarg);
        -:  142://                options.output->imbue(loco);
        -:  143://                break;
        -:  144://            }
        -:  145://            case 'l': {//external hyperlinks
        -:  146://                options.flags |= 1 << 2;
        -:  147://                break;
        -:  148://            }
        -:  149://            case 'n': {//presentation notes
        -:  150://                options.flags |= 1 << 3;
        -:  151://                break;
        -:  152://            }
        -:  153://            case 'm': {//doc metadata
        -:  154://                options.flags |= 1 << 4;
        -:  155://                break;
        -:  156://            }
        -:  157://            case 'r': {//raw cells data in tables in xlsx
        -:  158://                options.flags |= 1 << 5;
        -:  159://                break;
        -:  160://            }
        -:  161://            case 'h': {
        -:  162://                std::string usage = "usage: docxtotxt ";
        -:  163://                std::cout << usage << "[-lhmnr] [-d image_dir] [-i input_file]" << std::endl
        -:  164://                          << std::string(usage.length(), ' ') << "[-o output_file]" << std::endl;
        -:  165://                return 0;
        -:  166:////                if (options.output != nullptr)
        -:  167://            }
        -:  168://            default:
        -:  169://                std::cerr << "Invalid parameters" << std::endl;
        -:  170://        }
        -:  171://    try {
        -:  172://        if (options.filePath == nullptr) {
        -:  173://            throw std::invalid_argument("No input file by parameter -i");
        -:  174://        }
        -:  175://        docxtotxt::MainDocParser parser(options);
        -:  176://        parser.parseFile();
        -:  177://        std::cout << "Elapsed(ms)="
        -:  178://                  << std::chrono::duration_cast<std::chrono::milliseconds>(
        -:  179://                          std::chrono::steady_clock::now() - start).count()
        -:  180://                  << std::endl;
        -:  181://    } catch (std::exception &e) {
        -:  182://        std::cout << e.what() << std::endl;
        -:  183://    }
        -:  184://    return 0;
        -:  185://}
